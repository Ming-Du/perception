// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion_mid_tracker.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fusion_mid_tracker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace perception {
namespace mid_fusion {

namespace {

const ::google::protobuf::Descriptor* MidFusionTrackerConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MidFusionTrackerConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fusion_5fmid_5ftracker_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_fusion_5fmid_5ftracker_2eproto() {
  protobuf_AddDesc_fusion_5fmid_5ftracker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fusion_mid_tracker.proto");
  GOOGLE_CHECK(file != NULL);
  MidFusionTrackerConf_descriptor_ = file->message_type(0);
  static const int MidFusionTrackerConf_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidFusionTrackerConf, tracker_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidFusionTrackerConf, tracking_time_window_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidFusionTrackerConf, matcher_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidFusionTrackerConf, chosen_filter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidFusionTrackerConf, tracked_times_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidFusionTrackerConf, use_filter_),
  };
  MidFusionTrackerConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MidFusionTrackerConf_descriptor_,
      MidFusionTrackerConf::default_instance_,
      MidFusionTrackerConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidFusionTrackerConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(MidFusionTrackerConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MidFusionTrackerConf, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fusion_5fmid_5ftracker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MidFusionTrackerConf_descriptor_, &MidFusionTrackerConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fusion_5fmid_5ftracker_2eproto() {
  delete MidFusionTrackerConf::default_instance_;
  delete MidFusionTrackerConf_reflection_;
}

void protobuf_AddDesc_fusion_5fmid_5ftracker_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_fusion_5fmid_5ftracker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030fusion_mid_tracker.proto\022\025perception.m"
    "id_fusion\"\254\001\n\024MidFusionTrackerConf\022\024\n\014tr"
    "acker_name\030\001 \001(\t\022\034\n\024tracking_time_window"
    "\030\002 \001(\001\022\024\n\014matcher_name\030\003 \001(\t\022\025\n\rchosen_f"
    "ilter\030\004 \001(\t\022\037\n\027tracked_times_threshold\030\005"
    " \001(\001\022\022\n\nuse_filter\030\006 \001(\010", 224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fusion_mid_tracker.proto", &protobuf_RegisterTypes);
  MidFusionTrackerConf::default_instance_ = new MidFusionTrackerConf();
  MidFusionTrackerConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fusion_5fmid_5ftracker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fusion_5fmid_5ftracker_2eproto {
  StaticDescriptorInitializer_fusion_5fmid_5ftracker_2eproto() {
    protobuf_AddDesc_fusion_5fmid_5ftracker_2eproto();
  }
} static_descriptor_initializer_fusion_5fmid_5ftracker_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MidFusionTrackerConf::kTrackerNameFieldNumber;
const int MidFusionTrackerConf::kTrackingTimeWindowFieldNumber;
const int MidFusionTrackerConf::kMatcherNameFieldNumber;
const int MidFusionTrackerConf::kChosenFilterFieldNumber;
const int MidFusionTrackerConf::kTrackedTimesThresholdFieldNumber;
const int MidFusionTrackerConf::kUseFilterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MidFusionTrackerConf::MidFusionTrackerConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.mid_fusion.MidFusionTrackerConf)
}

void MidFusionTrackerConf::InitAsDefaultInstance() {
}

MidFusionTrackerConf::MidFusionTrackerConf(const MidFusionTrackerConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.mid_fusion.MidFusionTrackerConf)
}

void MidFusionTrackerConf::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tracker_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracking_time_window_ = 0;
  matcher_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chosen_filter_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracked_times_threshold_ = 0;
  use_filter_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MidFusionTrackerConf::~MidFusionTrackerConf() {
  // @@protoc_insertion_point(destructor:perception.mid_fusion.MidFusionTrackerConf)
  SharedDtor();
}

void MidFusionTrackerConf::SharedDtor() {
  tracker_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  matcher_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chosen_filter_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MidFusionTrackerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MidFusionTrackerConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MidFusionTrackerConf_descriptor_;
}

const MidFusionTrackerConf& MidFusionTrackerConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fusion_5fmid_5ftracker_2eproto();
  return *default_instance_;
}

MidFusionTrackerConf* MidFusionTrackerConf::default_instance_ = NULL;

MidFusionTrackerConf* MidFusionTrackerConf::New(::google::protobuf::Arena* arena) const {
  MidFusionTrackerConf* n = new MidFusionTrackerConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MidFusionTrackerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.mid_fusion.MidFusionTrackerConf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MidFusionTrackerConf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MidFusionTrackerConf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(tracked_times_threshold_, use_filter_);
    if (has_tracker_name()) {
      tracker_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    tracking_time_window_ = 0;
    if (has_matcher_name()) {
      matcher_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_chosen_filter()) {
      chosen_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MidFusionTrackerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.mid_fusion.MidFusionTrackerConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string tracker_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tracker_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tracker_name().data(), this->tracker_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.mid_fusion.MidFusionTrackerConf.tracker_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_tracking_time_window;
        break;
      }

      // optional double tracking_time_window = 2;
      case 2: {
        if (tag == 17) {
         parse_tracking_time_window:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_window_)));
          set_has_tracking_time_window();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_matcher_name;
        break;
      }

      // optional string matcher_name = 3;
      case 3: {
        if (tag == 26) {
         parse_matcher_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_matcher_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->matcher_name().data(), this->matcher_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.mid_fusion.MidFusionTrackerConf.matcher_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_chosen_filter;
        break;
      }

      // optional string chosen_filter = 4;
      case 4: {
        if (tag == 34) {
         parse_chosen_filter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_chosen_filter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->chosen_filter().data(), this->chosen_filter().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.mid_fusion.MidFusionTrackerConf.chosen_filter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_tracked_times_threshold;
        break;
      }

      // optional double tracked_times_threshold = 5;
      case 5: {
        if (tag == 41) {
         parse_tracked_times_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracked_times_threshold_)));
          set_has_tracked_times_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_use_filter;
        break;
      }

      // optional bool use_filter = 6;
      case 6: {
        if (tag == 48) {
         parse_use_filter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_filter_)));
          set_has_use_filter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.mid_fusion.MidFusionTrackerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.mid_fusion.MidFusionTrackerConf)
  return false;
#undef DO_
}

void MidFusionTrackerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.mid_fusion.MidFusionTrackerConf)
  // optional string tracker_name = 1;
  if (has_tracker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tracker_name().data(), this->tracker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.mid_fusion.MidFusionTrackerConf.tracker_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->tracker_name(), output);
  }

  // optional double tracking_time_window = 2;
  if (has_tracking_time_window()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->tracking_time_window(), output);
  }

  // optional string matcher_name = 3;
  if (has_matcher_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->matcher_name().data(), this->matcher_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.mid_fusion.MidFusionTrackerConf.matcher_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->matcher_name(), output);
  }

  // optional string chosen_filter = 4;
  if (has_chosen_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chosen_filter().data(), this->chosen_filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.mid_fusion.MidFusionTrackerConf.chosen_filter");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->chosen_filter(), output);
  }

  // optional double tracked_times_threshold = 5;
  if (has_tracked_times_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->tracked_times_threshold(), output);
  }

  // optional bool use_filter = 6;
  if (has_use_filter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_filter(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.mid_fusion.MidFusionTrackerConf)
}

::google::protobuf::uint8* MidFusionTrackerConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.mid_fusion.MidFusionTrackerConf)
  // optional string tracker_name = 1;
  if (has_tracker_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tracker_name().data(), this->tracker_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.mid_fusion.MidFusionTrackerConf.tracker_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tracker_name(), target);
  }

  // optional double tracking_time_window = 2;
  if (has_tracking_time_window()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->tracking_time_window(), target);
  }

  // optional string matcher_name = 3;
  if (has_matcher_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->matcher_name().data(), this->matcher_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.mid_fusion.MidFusionTrackerConf.matcher_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->matcher_name(), target);
  }

  // optional string chosen_filter = 4;
  if (has_chosen_filter()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->chosen_filter().data(), this->chosen_filter().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.mid_fusion.MidFusionTrackerConf.chosen_filter");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->chosen_filter(), target);
  }

  // optional double tracked_times_threshold = 5;
  if (has_tracked_times_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->tracked_times_threshold(), target);
  }

  // optional bool use_filter = 6;
  if (has_use_filter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_filter(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.mid_fusion.MidFusionTrackerConf)
  return target;
}

int MidFusionTrackerConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perception.mid_fusion.MidFusionTrackerConf)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional string tracker_name = 1;
    if (has_tracker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tracker_name());
    }

    // optional double tracking_time_window = 2;
    if (has_tracking_time_window()) {
      total_size += 1 + 8;
    }

    // optional string matcher_name = 3;
    if (has_matcher_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->matcher_name());
    }

    // optional string chosen_filter = 4;
    if (has_chosen_filter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->chosen_filter());
    }

    // optional double tracked_times_threshold = 5;
    if (has_tracked_times_threshold()) {
      total_size += 1 + 8;
    }

    // optional bool use_filter = 6;
    if (has_use_filter()) {
      total_size += 1 + 1;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MidFusionTrackerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.mid_fusion.MidFusionTrackerConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MidFusionTrackerConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MidFusionTrackerConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.mid_fusion.MidFusionTrackerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.mid_fusion.MidFusionTrackerConf)
    MergeFrom(*source);
  }
}

void MidFusionTrackerConf::MergeFrom(const MidFusionTrackerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.mid_fusion.MidFusionTrackerConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tracker_name()) {
      set_has_tracker_name();
      tracker_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tracker_name_);
    }
    if (from.has_tracking_time_window()) {
      set_tracking_time_window(from.tracking_time_window());
    }
    if (from.has_matcher_name()) {
      set_has_matcher_name();
      matcher_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.matcher_name_);
    }
    if (from.has_chosen_filter()) {
      set_has_chosen_filter();
      chosen_filter_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.chosen_filter_);
    }
    if (from.has_tracked_times_threshold()) {
      set_tracked_times_threshold(from.tracked_times_threshold());
    }
    if (from.has_use_filter()) {
      set_use_filter(from.use_filter());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MidFusionTrackerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.mid_fusion.MidFusionTrackerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MidFusionTrackerConf::CopyFrom(const MidFusionTrackerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.mid_fusion.MidFusionTrackerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MidFusionTrackerConf::IsInitialized() const {

  return true;
}

void MidFusionTrackerConf::Swap(MidFusionTrackerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MidFusionTrackerConf::InternalSwap(MidFusionTrackerConf* other) {
  tracker_name_.Swap(&other->tracker_name_);
  std::swap(tracking_time_window_, other->tracking_time_window_);
  matcher_name_.Swap(&other->matcher_name_);
  chosen_filter_.Swap(&other->chosen_filter_);
  std::swap(tracked_times_threshold_, other->tracked_times_threshold_);
  std::swap(use_filter_, other->use_filter_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MidFusionTrackerConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MidFusionTrackerConf_descriptor_;
  metadata.reflection = MidFusionTrackerConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MidFusionTrackerConf

// optional string tracker_name = 1;
bool MidFusionTrackerConf::has_tracker_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MidFusionTrackerConf::set_has_tracker_name() {
  _has_bits_[0] |= 0x00000001u;
}
void MidFusionTrackerConf::clear_has_tracker_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void MidFusionTrackerConf::clear_tracker_name() {
  tracker_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tracker_name();
}
 const ::std::string& MidFusionTrackerConf::tracker_name() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.MidFusionTrackerConf.tracker_name)
  return tracker_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MidFusionTrackerConf::set_tracker_name(const ::std::string& value) {
  set_has_tracker_name();
  tracker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.mid_fusion.MidFusionTrackerConf.tracker_name)
}
 void MidFusionTrackerConf::set_tracker_name(const char* value) {
  set_has_tracker_name();
  tracker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.mid_fusion.MidFusionTrackerConf.tracker_name)
}
 void MidFusionTrackerConf::set_tracker_name(const char* value, size_t size) {
  set_has_tracker_name();
  tracker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.mid_fusion.MidFusionTrackerConf.tracker_name)
}
 ::std::string* MidFusionTrackerConf::mutable_tracker_name() {
  set_has_tracker_name();
  // @@protoc_insertion_point(field_mutable:perception.mid_fusion.MidFusionTrackerConf.tracker_name)
  return tracker_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MidFusionTrackerConf::release_tracker_name() {
  // @@protoc_insertion_point(field_release:perception.mid_fusion.MidFusionTrackerConf.tracker_name)
  clear_has_tracker_name();
  return tracker_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MidFusionTrackerConf::set_allocated_tracker_name(::std::string* tracker_name) {
  if (tracker_name != NULL) {
    set_has_tracker_name();
  } else {
    clear_has_tracker_name();
  }
  tracker_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracker_name);
  // @@protoc_insertion_point(field_set_allocated:perception.mid_fusion.MidFusionTrackerConf.tracker_name)
}

// optional double tracking_time_window = 2;
bool MidFusionTrackerConf::has_tracking_time_window() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MidFusionTrackerConf::set_has_tracking_time_window() {
  _has_bits_[0] |= 0x00000002u;
}
void MidFusionTrackerConf::clear_has_tracking_time_window() {
  _has_bits_[0] &= ~0x00000002u;
}
void MidFusionTrackerConf::clear_tracking_time_window() {
  tracking_time_window_ = 0;
  clear_has_tracking_time_window();
}
 double MidFusionTrackerConf::tracking_time_window() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.MidFusionTrackerConf.tracking_time_window)
  return tracking_time_window_;
}
 void MidFusionTrackerConf::set_tracking_time_window(double value) {
  set_has_tracking_time_window();
  tracking_time_window_ = value;
  // @@protoc_insertion_point(field_set:perception.mid_fusion.MidFusionTrackerConf.tracking_time_window)
}

// optional string matcher_name = 3;
bool MidFusionTrackerConf::has_matcher_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MidFusionTrackerConf::set_has_matcher_name() {
  _has_bits_[0] |= 0x00000004u;
}
void MidFusionTrackerConf::clear_has_matcher_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void MidFusionTrackerConf::clear_matcher_name() {
  matcher_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_matcher_name();
}
 const ::std::string& MidFusionTrackerConf::matcher_name() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.MidFusionTrackerConf.matcher_name)
  return matcher_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MidFusionTrackerConf::set_matcher_name(const ::std::string& value) {
  set_has_matcher_name();
  matcher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.mid_fusion.MidFusionTrackerConf.matcher_name)
}
 void MidFusionTrackerConf::set_matcher_name(const char* value) {
  set_has_matcher_name();
  matcher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.mid_fusion.MidFusionTrackerConf.matcher_name)
}
 void MidFusionTrackerConf::set_matcher_name(const char* value, size_t size) {
  set_has_matcher_name();
  matcher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.mid_fusion.MidFusionTrackerConf.matcher_name)
}
 ::std::string* MidFusionTrackerConf::mutable_matcher_name() {
  set_has_matcher_name();
  // @@protoc_insertion_point(field_mutable:perception.mid_fusion.MidFusionTrackerConf.matcher_name)
  return matcher_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MidFusionTrackerConf::release_matcher_name() {
  // @@protoc_insertion_point(field_release:perception.mid_fusion.MidFusionTrackerConf.matcher_name)
  clear_has_matcher_name();
  return matcher_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MidFusionTrackerConf::set_allocated_matcher_name(::std::string* matcher_name) {
  if (matcher_name != NULL) {
    set_has_matcher_name();
  } else {
    clear_has_matcher_name();
  }
  matcher_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matcher_name);
  // @@protoc_insertion_point(field_set_allocated:perception.mid_fusion.MidFusionTrackerConf.matcher_name)
}

// optional string chosen_filter = 4;
bool MidFusionTrackerConf::has_chosen_filter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MidFusionTrackerConf::set_has_chosen_filter() {
  _has_bits_[0] |= 0x00000008u;
}
void MidFusionTrackerConf::clear_has_chosen_filter() {
  _has_bits_[0] &= ~0x00000008u;
}
void MidFusionTrackerConf::clear_chosen_filter() {
  chosen_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chosen_filter();
}
 const ::std::string& MidFusionTrackerConf::chosen_filter() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.MidFusionTrackerConf.chosen_filter)
  return chosen_filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MidFusionTrackerConf::set_chosen_filter(const ::std::string& value) {
  set_has_chosen_filter();
  chosen_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.mid_fusion.MidFusionTrackerConf.chosen_filter)
}
 void MidFusionTrackerConf::set_chosen_filter(const char* value) {
  set_has_chosen_filter();
  chosen_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.mid_fusion.MidFusionTrackerConf.chosen_filter)
}
 void MidFusionTrackerConf::set_chosen_filter(const char* value, size_t size) {
  set_has_chosen_filter();
  chosen_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.mid_fusion.MidFusionTrackerConf.chosen_filter)
}
 ::std::string* MidFusionTrackerConf::mutable_chosen_filter() {
  set_has_chosen_filter();
  // @@protoc_insertion_point(field_mutable:perception.mid_fusion.MidFusionTrackerConf.chosen_filter)
  return chosen_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MidFusionTrackerConf::release_chosen_filter() {
  // @@protoc_insertion_point(field_release:perception.mid_fusion.MidFusionTrackerConf.chosen_filter)
  clear_has_chosen_filter();
  return chosen_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MidFusionTrackerConf::set_allocated_chosen_filter(::std::string* chosen_filter) {
  if (chosen_filter != NULL) {
    set_has_chosen_filter();
  } else {
    clear_has_chosen_filter();
  }
  chosen_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chosen_filter);
  // @@protoc_insertion_point(field_set_allocated:perception.mid_fusion.MidFusionTrackerConf.chosen_filter)
}

// optional double tracked_times_threshold = 5;
bool MidFusionTrackerConf::has_tracked_times_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MidFusionTrackerConf::set_has_tracked_times_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
void MidFusionTrackerConf::clear_has_tracked_times_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
void MidFusionTrackerConf::clear_tracked_times_threshold() {
  tracked_times_threshold_ = 0;
  clear_has_tracked_times_threshold();
}
 double MidFusionTrackerConf::tracked_times_threshold() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.MidFusionTrackerConf.tracked_times_threshold)
  return tracked_times_threshold_;
}
 void MidFusionTrackerConf::set_tracked_times_threshold(double value) {
  set_has_tracked_times_threshold();
  tracked_times_threshold_ = value;
  // @@protoc_insertion_point(field_set:perception.mid_fusion.MidFusionTrackerConf.tracked_times_threshold)
}

// optional bool use_filter = 6;
bool MidFusionTrackerConf::has_use_filter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MidFusionTrackerConf::set_has_use_filter() {
  _has_bits_[0] |= 0x00000020u;
}
void MidFusionTrackerConf::clear_has_use_filter() {
  _has_bits_[0] &= ~0x00000020u;
}
void MidFusionTrackerConf::clear_use_filter() {
  use_filter_ = false;
  clear_has_use_filter();
}
 bool MidFusionTrackerConf::use_filter() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.MidFusionTrackerConf.use_filter)
  return use_filter_;
}
 void MidFusionTrackerConf::set_use_filter(bool value) {
  set_has_use_filter();
  use_filter_ = value;
  // @@protoc_insertion_point(field_set:perception.mid_fusion.MidFusionTrackerConf.use_filter)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mid_fusion
}  // namespace perception

// @@protoc_insertion_point(global_scope)
