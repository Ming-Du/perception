// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion_mid_component.proto

#ifndef PROTOBUF_fusion_5fmid_5fcomponent_2eproto__INCLUDED
#define PROTOBUF_fusion_5fmid_5fcomponent_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace perception {
namespace mid_fusion {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_fusion_5fmid_5fcomponent_2eproto();
void protobuf_AssignDesc_fusion_5fmid_5fcomponent_2eproto();
void protobuf_ShutdownFile_fusion_5fmid_5fcomponent_2eproto();

class MidFusionInitOptions;

// ===================================================================

class MidFusionInitOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perception.mid_fusion.MidFusionInitOptions) */ {
 public:
  MidFusionInitOptions();
  virtual ~MidFusionInitOptions();

  MidFusionInitOptions(const MidFusionInitOptions& from);

  inline MidFusionInitOptions& operator=(const MidFusionInitOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MidFusionInitOptions& default_instance();

  void Swap(MidFusionInitOptions* other);

  // implements Message ----------------------------------------------

  inline MidFusionInitOptions* New() const { return New(NULL); }

  MidFusionInitOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MidFusionInitOptions& from);
  void MergeFrom(const MidFusionInitOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MidFusionInitOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string rec_topic_name_lidar_cloud = 1;
  bool has_rec_topic_name_lidar_cloud() const;
  void clear_rec_topic_name_lidar_cloud();
  static const int kRecTopicNameLidarCloudFieldNumber = 1;
  const ::std::string& rec_topic_name_lidar_cloud() const;
  void set_rec_topic_name_lidar_cloud(const ::std::string& value);
  void set_rec_topic_name_lidar_cloud(const char* value);
  void set_rec_topic_name_lidar_cloud(const char* value, size_t size);
  ::std::string* mutable_rec_topic_name_lidar_cloud();
  ::std::string* release_rec_topic_name_lidar_cloud();
  void set_allocated_rec_topic_name_lidar_cloud(::std::string* rec_topic_name_lidar_cloud);

  // optional string rec_topic_name_lidar_obstacle = 2;
  bool has_rec_topic_name_lidar_obstacle() const;
  void clear_rec_topic_name_lidar_obstacle();
  static const int kRecTopicNameLidarObstacleFieldNumber = 2;
  const ::std::string& rec_topic_name_lidar_obstacle() const;
  void set_rec_topic_name_lidar_obstacle(const ::std::string& value);
  void set_rec_topic_name_lidar_obstacle(const char* value);
  void set_rec_topic_name_lidar_obstacle(const char* value, size_t size);
  ::std::string* mutable_rec_topic_name_lidar_obstacle();
  ::std::string* release_rec_topic_name_lidar_obstacle();
  void set_allocated_rec_topic_name_lidar_obstacle(::std::string* rec_topic_name_lidar_obstacle);

  // optional string vehicle_type = 3;
  bool has_vehicle_type() const;
  void clear_vehicle_type();
  static const int kVehicleTypeFieldNumber = 3;
  const ::std::string& vehicle_type() const;
  void set_vehicle_type(const ::std::string& value);
  void set_vehicle_type(const char* value);
  void set_vehicle_type(const char* value, size_t size);
  ::std::string* mutable_vehicle_type();
  ::std::string* release_vehicle_type();
  void set_allocated_vehicle_type(::std::string* vehicle_type);

  // @@protoc_insertion_point(class_scope:perception.mid_fusion.MidFusionInitOptions)
 private:
  inline void set_has_rec_topic_name_lidar_cloud();
  inline void clear_has_rec_topic_name_lidar_cloud();
  inline void set_has_rec_topic_name_lidar_obstacle();
  inline void clear_has_rec_topic_name_lidar_obstacle();
  inline void set_has_vehicle_type();
  inline void clear_has_vehicle_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr rec_topic_name_lidar_cloud_;
  ::google::protobuf::internal::ArenaStringPtr rec_topic_name_lidar_obstacle_;
  ::google::protobuf::internal::ArenaStringPtr vehicle_type_;
  friend void  protobuf_AddDesc_fusion_5fmid_5fcomponent_2eproto();
  friend void protobuf_AssignDesc_fusion_5fmid_5fcomponent_2eproto();
  friend void protobuf_ShutdownFile_fusion_5fmid_5fcomponent_2eproto();

  void InitAsDefaultInstance();
  static MidFusionInitOptions* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MidFusionInitOptions

// optional string rec_topic_name_lidar_cloud = 1;
inline bool MidFusionInitOptions::has_rec_topic_name_lidar_cloud() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MidFusionInitOptions::set_has_rec_topic_name_lidar_cloud() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MidFusionInitOptions::clear_has_rec_topic_name_lidar_cloud() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MidFusionInitOptions::clear_rec_topic_name_lidar_cloud() {
  rec_topic_name_lidar_cloud_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rec_topic_name_lidar_cloud();
}
inline const ::std::string& MidFusionInitOptions::rec_topic_name_lidar_cloud() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.MidFusionInitOptions.rec_topic_name_lidar_cloud)
  return rec_topic_name_lidar_cloud_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MidFusionInitOptions::set_rec_topic_name_lidar_cloud(const ::std::string& value) {
  set_has_rec_topic_name_lidar_cloud();
  rec_topic_name_lidar_cloud_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.mid_fusion.MidFusionInitOptions.rec_topic_name_lidar_cloud)
}
inline void MidFusionInitOptions::set_rec_topic_name_lidar_cloud(const char* value) {
  set_has_rec_topic_name_lidar_cloud();
  rec_topic_name_lidar_cloud_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.mid_fusion.MidFusionInitOptions.rec_topic_name_lidar_cloud)
}
inline void MidFusionInitOptions::set_rec_topic_name_lidar_cloud(const char* value, size_t size) {
  set_has_rec_topic_name_lidar_cloud();
  rec_topic_name_lidar_cloud_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.mid_fusion.MidFusionInitOptions.rec_topic_name_lidar_cloud)
}
inline ::std::string* MidFusionInitOptions::mutable_rec_topic_name_lidar_cloud() {
  set_has_rec_topic_name_lidar_cloud();
  // @@protoc_insertion_point(field_mutable:perception.mid_fusion.MidFusionInitOptions.rec_topic_name_lidar_cloud)
  return rec_topic_name_lidar_cloud_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MidFusionInitOptions::release_rec_topic_name_lidar_cloud() {
  // @@protoc_insertion_point(field_release:perception.mid_fusion.MidFusionInitOptions.rec_topic_name_lidar_cloud)
  clear_has_rec_topic_name_lidar_cloud();
  return rec_topic_name_lidar_cloud_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MidFusionInitOptions::set_allocated_rec_topic_name_lidar_cloud(::std::string* rec_topic_name_lidar_cloud) {
  if (rec_topic_name_lidar_cloud != NULL) {
    set_has_rec_topic_name_lidar_cloud();
  } else {
    clear_has_rec_topic_name_lidar_cloud();
  }
  rec_topic_name_lidar_cloud_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rec_topic_name_lidar_cloud);
  // @@protoc_insertion_point(field_set_allocated:perception.mid_fusion.MidFusionInitOptions.rec_topic_name_lidar_cloud)
}

// optional string rec_topic_name_lidar_obstacle = 2;
inline bool MidFusionInitOptions::has_rec_topic_name_lidar_obstacle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MidFusionInitOptions::set_has_rec_topic_name_lidar_obstacle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MidFusionInitOptions::clear_has_rec_topic_name_lidar_obstacle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MidFusionInitOptions::clear_rec_topic_name_lidar_obstacle() {
  rec_topic_name_lidar_obstacle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_rec_topic_name_lidar_obstacle();
}
inline const ::std::string& MidFusionInitOptions::rec_topic_name_lidar_obstacle() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.MidFusionInitOptions.rec_topic_name_lidar_obstacle)
  return rec_topic_name_lidar_obstacle_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MidFusionInitOptions::set_rec_topic_name_lidar_obstacle(const ::std::string& value) {
  set_has_rec_topic_name_lidar_obstacle();
  rec_topic_name_lidar_obstacle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.mid_fusion.MidFusionInitOptions.rec_topic_name_lidar_obstacle)
}
inline void MidFusionInitOptions::set_rec_topic_name_lidar_obstacle(const char* value) {
  set_has_rec_topic_name_lidar_obstacle();
  rec_topic_name_lidar_obstacle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.mid_fusion.MidFusionInitOptions.rec_topic_name_lidar_obstacle)
}
inline void MidFusionInitOptions::set_rec_topic_name_lidar_obstacle(const char* value, size_t size) {
  set_has_rec_topic_name_lidar_obstacle();
  rec_topic_name_lidar_obstacle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.mid_fusion.MidFusionInitOptions.rec_topic_name_lidar_obstacle)
}
inline ::std::string* MidFusionInitOptions::mutable_rec_topic_name_lidar_obstacle() {
  set_has_rec_topic_name_lidar_obstacle();
  // @@protoc_insertion_point(field_mutable:perception.mid_fusion.MidFusionInitOptions.rec_topic_name_lidar_obstacle)
  return rec_topic_name_lidar_obstacle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MidFusionInitOptions::release_rec_topic_name_lidar_obstacle() {
  // @@protoc_insertion_point(field_release:perception.mid_fusion.MidFusionInitOptions.rec_topic_name_lidar_obstacle)
  clear_has_rec_topic_name_lidar_obstacle();
  return rec_topic_name_lidar_obstacle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MidFusionInitOptions::set_allocated_rec_topic_name_lidar_obstacle(::std::string* rec_topic_name_lidar_obstacle) {
  if (rec_topic_name_lidar_obstacle != NULL) {
    set_has_rec_topic_name_lidar_obstacle();
  } else {
    clear_has_rec_topic_name_lidar_obstacle();
  }
  rec_topic_name_lidar_obstacle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rec_topic_name_lidar_obstacle);
  // @@protoc_insertion_point(field_set_allocated:perception.mid_fusion.MidFusionInitOptions.rec_topic_name_lidar_obstacle)
}

// optional string vehicle_type = 3;
inline bool MidFusionInitOptions::has_vehicle_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MidFusionInitOptions::set_has_vehicle_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MidFusionInitOptions::clear_has_vehicle_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MidFusionInitOptions::clear_vehicle_type() {
  vehicle_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_vehicle_type();
}
inline const ::std::string& MidFusionInitOptions::vehicle_type() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.MidFusionInitOptions.vehicle_type)
  return vehicle_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MidFusionInitOptions::set_vehicle_type(const ::std::string& value) {
  set_has_vehicle_type();
  vehicle_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.mid_fusion.MidFusionInitOptions.vehicle_type)
}
inline void MidFusionInitOptions::set_vehicle_type(const char* value) {
  set_has_vehicle_type();
  vehicle_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.mid_fusion.MidFusionInitOptions.vehicle_type)
}
inline void MidFusionInitOptions::set_vehicle_type(const char* value, size_t size) {
  set_has_vehicle_type();
  vehicle_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.mid_fusion.MidFusionInitOptions.vehicle_type)
}
inline ::std::string* MidFusionInitOptions::mutable_vehicle_type() {
  set_has_vehicle_type();
  // @@protoc_insertion_point(field_mutable:perception.mid_fusion.MidFusionInitOptions.vehicle_type)
  return vehicle_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MidFusionInitOptions::release_vehicle_type() {
  // @@protoc_insertion_point(field_release:perception.mid_fusion.MidFusionInitOptions.vehicle_type)
  clear_has_vehicle_type();
  return vehicle_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MidFusionInitOptions::set_allocated_vehicle_type(::std::string* vehicle_type) {
  if (vehicle_type != NULL) {
    set_has_vehicle_type();
  } else {
    clear_has_vehicle_type();
  }
  vehicle_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vehicle_type);
  // @@protoc_insertion_point(field_set_allocated:perception.mid_fusion.MidFusionInitOptions.vehicle_type)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mid_fusion
}  // namespace perception

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fusion_5fmid_5fcomponent_2eproto__INCLUDED
