// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion_mid_tracker.proto

#ifndef PROTOBUF_fusion_5fmid_5ftracker_2eproto__INCLUDED
#define PROTOBUF_fusion_5fmid_5ftracker_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace perception {
namespace mid_fusion {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_fusion_5fmid_5ftracker_2eproto();
void protobuf_AssignDesc_fusion_5fmid_5ftracker_2eproto();
void protobuf_ShutdownFile_fusion_5fmid_5ftracker_2eproto();

class MidFusionTrackerConf;

// ===================================================================

class MidFusionTrackerConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perception.mid_fusion.MidFusionTrackerConf) */ {
 public:
  MidFusionTrackerConf();
  virtual ~MidFusionTrackerConf();

  MidFusionTrackerConf(const MidFusionTrackerConf& from);

  inline MidFusionTrackerConf& operator=(const MidFusionTrackerConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MidFusionTrackerConf& default_instance();

  void Swap(MidFusionTrackerConf* other);

  // implements Message ----------------------------------------------

  inline MidFusionTrackerConf* New() const { return New(NULL); }

  MidFusionTrackerConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MidFusionTrackerConf& from);
  void MergeFrom(const MidFusionTrackerConf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MidFusionTrackerConf* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string tracker_name = 1;
  bool has_tracker_name() const;
  void clear_tracker_name();
  static const int kTrackerNameFieldNumber = 1;
  const ::std::string& tracker_name() const;
  void set_tracker_name(const ::std::string& value);
  void set_tracker_name(const char* value);
  void set_tracker_name(const char* value, size_t size);
  ::std::string* mutable_tracker_name();
  ::std::string* release_tracker_name();
  void set_allocated_tracker_name(::std::string* tracker_name);

  // optional double tracking_time_window = 2;
  bool has_tracking_time_window() const;
  void clear_tracking_time_window();
  static const int kTrackingTimeWindowFieldNumber = 2;
  double tracking_time_window() const;
  void set_tracking_time_window(double value);

  // optional string matcher_name = 3;
  bool has_matcher_name() const;
  void clear_matcher_name();
  static const int kMatcherNameFieldNumber = 3;
  const ::std::string& matcher_name() const;
  void set_matcher_name(const ::std::string& value);
  void set_matcher_name(const char* value);
  void set_matcher_name(const char* value, size_t size);
  ::std::string* mutable_matcher_name();
  ::std::string* release_matcher_name();
  void set_allocated_matcher_name(::std::string* matcher_name);

  // optional string chosen_filter = 4;
  bool has_chosen_filter() const;
  void clear_chosen_filter();
  static const int kChosenFilterFieldNumber = 4;
  const ::std::string& chosen_filter() const;
  void set_chosen_filter(const ::std::string& value);
  void set_chosen_filter(const char* value);
  void set_chosen_filter(const char* value, size_t size);
  ::std::string* mutable_chosen_filter();
  ::std::string* release_chosen_filter();
  void set_allocated_chosen_filter(::std::string* chosen_filter);

  // optional double tracked_times_threshold = 5;
  bool has_tracked_times_threshold() const;
  void clear_tracked_times_threshold();
  static const int kTrackedTimesThresholdFieldNumber = 5;
  double tracked_times_threshold() const;
  void set_tracked_times_threshold(double value);

  // optional bool use_filter = 6;
  bool has_use_filter() const;
  void clear_use_filter();
  static const int kUseFilterFieldNumber = 6;
  bool use_filter() const;
  void set_use_filter(bool value);

  // @@protoc_insertion_point(class_scope:perception.mid_fusion.MidFusionTrackerConf)
 private:
  inline void set_has_tracker_name();
  inline void clear_has_tracker_name();
  inline void set_has_tracking_time_window();
  inline void clear_has_tracking_time_window();
  inline void set_has_matcher_name();
  inline void clear_has_matcher_name();
  inline void set_has_chosen_filter();
  inline void clear_has_chosen_filter();
  inline void set_has_tracked_times_threshold();
  inline void clear_has_tracked_times_threshold();
  inline void set_has_use_filter();
  inline void clear_has_use_filter();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr tracker_name_;
  double tracking_time_window_;
  ::google::protobuf::internal::ArenaStringPtr matcher_name_;
  ::google::protobuf::internal::ArenaStringPtr chosen_filter_;
  double tracked_times_threshold_;
  bool use_filter_;
  friend void  protobuf_AddDesc_fusion_5fmid_5ftracker_2eproto();
  friend void protobuf_AssignDesc_fusion_5fmid_5ftracker_2eproto();
  friend void protobuf_ShutdownFile_fusion_5fmid_5ftracker_2eproto();

  void InitAsDefaultInstance();
  static MidFusionTrackerConf* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MidFusionTrackerConf

// optional string tracker_name = 1;
inline bool MidFusionTrackerConf::has_tracker_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MidFusionTrackerConf::set_has_tracker_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MidFusionTrackerConf::clear_has_tracker_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MidFusionTrackerConf::clear_tracker_name() {
  tracker_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tracker_name();
}
inline const ::std::string& MidFusionTrackerConf::tracker_name() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.MidFusionTrackerConf.tracker_name)
  return tracker_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MidFusionTrackerConf::set_tracker_name(const ::std::string& value) {
  set_has_tracker_name();
  tracker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.mid_fusion.MidFusionTrackerConf.tracker_name)
}
inline void MidFusionTrackerConf::set_tracker_name(const char* value) {
  set_has_tracker_name();
  tracker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.mid_fusion.MidFusionTrackerConf.tracker_name)
}
inline void MidFusionTrackerConf::set_tracker_name(const char* value, size_t size) {
  set_has_tracker_name();
  tracker_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.mid_fusion.MidFusionTrackerConf.tracker_name)
}
inline ::std::string* MidFusionTrackerConf::mutable_tracker_name() {
  set_has_tracker_name();
  // @@protoc_insertion_point(field_mutable:perception.mid_fusion.MidFusionTrackerConf.tracker_name)
  return tracker_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MidFusionTrackerConf::release_tracker_name() {
  // @@protoc_insertion_point(field_release:perception.mid_fusion.MidFusionTrackerConf.tracker_name)
  clear_has_tracker_name();
  return tracker_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MidFusionTrackerConf::set_allocated_tracker_name(::std::string* tracker_name) {
  if (tracker_name != NULL) {
    set_has_tracker_name();
  } else {
    clear_has_tracker_name();
  }
  tracker_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracker_name);
  // @@protoc_insertion_point(field_set_allocated:perception.mid_fusion.MidFusionTrackerConf.tracker_name)
}

// optional double tracking_time_window = 2;
inline bool MidFusionTrackerConf::has_tracking_time_window() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MidFusionTrackerConf::set_has_tracking_time_window() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MidFusionTrackerConf::clear_has_tracking_time_window() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MidFusionTrackerConf::clear_tracking_time_window() {
  tracking_time_window_ = 0;
  clear_has_tracking_time_window();
}
inline double MidFusionTrackerConf::tracking_time_window() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.MidFusionTrackerConf.tracking_time_window)
  return tracking_time_window_;
}
inline void MidFusionTrackerConf::set_tracking_time_window(double value) {
  set_has_tracking_time_window();
  tracking_time_window_ = value;
  // @@protoc_insertion_point(field_set:perception.mid_fusion.MidFusionTrackerConf.tracking_time_window)
}

// optional string matcher_name = 3;
inline bool MidFusionTrackerConf::has_matcher_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MidFusionTrackerConf::set_has_matcher_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MidFusionTrackerConf::clear_has_matcher_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MidFusionTrackerConf::clear_matcher_name() {
  matcher_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_matcher_name();
}
inline const ::std::string& MidFusionTrackerConf::matcher_name() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.MidFusionTrackerConf.matcher_name)
  return matcher_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MidFusionTrackerConf::set_matcher_name(const ::std::string& value) {
  set_has_matcher_name();
  matcher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.mid_fusion.MidFusionTrackerConf.matcher_name)
}
inline void MidFusionTrackerConf::set_matcher_name(const char* value) {
  set_has_matcher_name();
  matcher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.mid_fusion.MidFusionTrackerConf.matcher_name)
}
inline void MidFusionTrackerConf::set_matcher_name(const char* value, size_t size) {
  set_has_matcher_name();
  matcher_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.mid_fusion.MidFusionTrackerConf.matcher_name)
}
inline ::std::string* MidFusionTrackerConf::mutable_matcher_name() {
  set_has_matcher_name();
  // @@protoc_insertion_point(field_mutable:perception.mid_fusion.MidFusionTrackerConf.matcher_name)
  return matcher_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MidFusionTrackerConf::release_matcher_name() {
  // @@protoc_insertion_point(field_release:perception.mid_fusion.MidFusionTrackerConf.matcher_name)
  clear_has_matcher_name();
  return matcher_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MidFusionTrackerConf::set_allocated_matcher_name(::std::string* matcher_name) {
  if (matcher_name != NULL) {
    set_has_matcher_name();
  } else {
    clear_has_matcher_name();
  }
  matcher_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), matcher_name);
  // @@protoc_insertion_point(field_set_allocated:perception.mid_fusion.MidFusionTrackerConf.matcher_name)
}

// optional string chosen_filter = 4;
inline bool MidFusionTrackerConf::has_chosen_filter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MidFusionTrackerConf::set_has_chosen_filter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MidFusionTrackerConf::clear_has_chosen_filter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MidFusionTrackerConf::clear_chosen_filter() {
  chosen_filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_chosen_filter();
}
inline const ::std::string& MidFusionTrackerConf::chosen_filter() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.MidFusionTrackerConf.chosen_filter)
  return chosen_filter_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MidFusionTrackerConf::set_chosen_filter(const ::std::string& value) {
  set_has_chosen_filter();
  chosen_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.mid_fusion.MidFusionTrackerConf.chosen_filter)
}
inline void MidFusionTrackerConf::set_chosen_filter(const char* value) {
  set_has_chosen_filter();
  chosen_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.mid_fusion.MidFusionTrackerConf.chosen_filter)
}
inline void MidFusionTrackerConf::set_chosen_filter(const char* value, size_t size) {
  set_has_chosen_filter();
  chosen_filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.mid_fusion.MidFusionTrackerConf.chosen_filter)
}
inline ::std::string* MidFusionTrackerConf::mutable_chosen_filter() {
  set_has_chosen_filter();
  // @@protoc_insertion_point(field_mutable:perception.mid_fusion.MidFusionTrackerConf.chosen_filter)
  return chosen_filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MidFusionTrackerConf::release_chosen_filter() {
  // @@protoc_insertion_point(field_release:perception.mid_fusion.MidFusionTrackerConf.chosen_filter)
  clear_has_chosen_filter();
  return chosen_filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MidFusionTrackerConf::set_allocated_chosen_filter(::std::string* chosen_filter) {
  if (chosen_filter != NULL) {
    set_has_chosen_filter();
  } else {
    clear_has_chosen_filter();
  }
  chosen_filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), chosen_filter);
  // @@protoc_insertion_point(field_set_allocated:perception.mid_fusion.MidFusionTrackerConf.chosen_filter)
}

// optional double tracked_times_threshold = 5;
inline bool MidFusionTrackerConf::has_tracked_times_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MidFusionTrackerConf::set_has_tracked_times_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MidFusionTrackerConf::clear_has_tracked_times_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MidFusionTrackerConf::clear_tracked_times_threshold() {
  tracked_times_threshold_ = 0;
  clear_has_tracked_times_threshold();
}
inline double MidFusionTrackerConf::tracked_times_threshold() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.MidFusionTrackerConf.tracked_times_threshold)
  return tracked_times_threshold_;
}
inline void MidFusionTrackerConf::set_tracked_times_threshold(double value) {
  set_has_tracked_times_threshold();
  tracked_times_threshold_ = value;
  // @@protoc_insertion_point(field_set:perception.mid_fusion.MidFusionTrackerConf.tracked_times_threshold)
}

// optional bool use_filter = 6;
inline bool MidFusionTrackerConf::has_use_filter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MidFusionTrackerConf::set_has_use_filter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MidFusionTrackerConf::clear_has_use_filter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MidFusionTrackerConf::clear_use_filter() {
  use_filter_ = false;
  clear_has_use_filter();
}
inline bool MidFusionTrackerConf::use_filter() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.MidFusionTrackerConf.use_filter)
  return use_filter_;
}
inline void MidFusionTrackerConf::set_use_filter(bool value) {
  set_has_use_filter();
  use_filter_ = value;
  // @@protoc_insertion_point(field_set:perception.mid_fusion.MidFusionTrackerConf.use_filter)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mid_fusion
}  // namespace perception

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fusion_5fmid_5ftracker_2eproto__INCLUDED
