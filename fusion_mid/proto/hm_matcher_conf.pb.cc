// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hm_matcher_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hm_matcher_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace perception {
namespace mid_fusion {

namespace {

const ::google::protobuf::Descriptor* HmMatcherConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HmMatcherConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hm_5fmatcher_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_hm_5fmatcher_5fconf_2eproto() {
  protobuf_AddDesc_hm_5fmatcher_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hm_matcher_conf.proto");
  GOOGLE_CHECK(file != NULL);
  HmMatcherConf_descriptor_ = file->message_type(0);
  static const int HmMatcherConf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HmMatcherConf, max_match_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HmMatcherConf, bound_match_distance_),
  };
  HmMatcherConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HmMatcherConf_descriptor_,
      HmMatcherConf::default_instance_,
      HmMatcherConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HmMatcherConf, _has_bits_[0]),
      -1,
      -1,
      sizeof(HmMatcherConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HmMatcherConf, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hm_5fmatcher_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HmMatcherConf_descriptor_, &HmMatcherConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hm_5fmatcher_5fconf_2eproto() {
  delete HmMatcherConf::default_instance_;
  delete HmMatcherConf_reflection_;
}

void protobuf_AddDesc_hm_5fmatcher_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_hm_5fmatcher_5fconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025hm_matcher_conf.proto\022\025perception.mid_"
    "fusion\"I\n\rHmMatcherConf\022\032\n\022max_match_dis"
    "tance\030\001 \001(\001\022\034\n\024bound_match_distance\030\002 \001("
    "\001", 121);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hm_matcher_conf.proto", &protobuf_RegisterTypes);
  HmMatcherConf::default_instance_ = new HmMatcherConf();
  HmMatcherConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hm_5fmatcher_5fconf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hm_5fmatcher_5fconf_2eproto {
  StaticDescriptorInitializer_hm_5fmatcher_5fconf_2eproto() {
    protobuf_AddDesc_hm_5fmatcher_5fconf_2eproto();
  }
} static_descriptor_initializer_hm_5fmatcher_5fconf_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HmMatcherConf::kMaxMatchDistanceFieldNumber;
const int HmMatcherConf::kBoundMatchDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HmMatcherConf::HmMatcherConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.mid_fusion.HmMatcherConf)
}

void HmMatcherConf::InitAsDefaultInstance() {
}

HmMatcherConf::HmMatcherConf(const HmMatcherConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.mid_fusion.HmMatcherConf)
}

void HmMatcherConf::SharedCtor() {
  _cached_size_ = 0;
  max_match_distance_ = 0;
  bound_match_distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HmMatcherConf::~HmMatcherConf() {
  // @@protoc_insertion_point(destructor:perception.mid_fusion.HmMatcherConf)
  SharedDtor();
}

void HmMatcherConf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HmMatcherConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HmMatcherConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HmMatcherConf_descriptor_;
}

const HmMatcherConf& HmMatcherConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hm_5fmatcher_5fconf_2eproto();
  return *default_instance_;
}

HmMatcherConf* HmMatcherConf::default_instance_ = NULL;

HmMatcherConf* HmMatcherConf::New(::google::protobuf::Arena* arena) const {
  HmMatcherConf* n = new HmMatcherConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HmMatcherConf::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.mid_fusion.HmMatcherConf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HmMatcherConf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HmMatcherConf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(max_match_distance_, bound_match_distance_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HmMatcherConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.mid_fusion.HmMatcherConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double max_match_distance = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_match_distance_)));
          set_has_max_match_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_bound_match_distance;
        break;
      }

      // optional double bound_match_distance = 2;
      case 2: {
        if (tag == 17) {
         parse_bound_match_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bound_match_distance_)));
          set_has_bound_match_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.mid_fusion.HmMatcherConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.mid_fusion.HmMatcherConf)
  return false;
#undef DO_
}

void HmMatcherConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.mid_fusion.HmMatcherConf)
  // optional double max_match_distance = 1;
  if (has_max_match_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->max_match_distance(), output);
  }

  // optional double bound_match_distance = 2;
  if (has_bound_match_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->bound_match_distance(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.mid_fusion.HmMatcherConf)
}

::google::protobuf::uint8* HmMatcherConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.mid_fusion.HmMatcherConf)
  // optional double max_match_distance = 1;
  if (has_max_match_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->max_match_distance(), target);
  }

  // optional double bound_match_distance = 2;
  if (has_bound_match_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->bound_match_distance(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.mid_fusion.HmMatcherConf)
  return target;
}

int HmMatcherConf::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perception.mid_fusion.HmMatcherConf)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional double max_match_distance = 1;
    if (has_max_match_distance()) {
      total_size += 1 + 8;
    }

    // optional double bound_match_distance = 2;
    if (has_bound_match_distance()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HmMatcherConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.mid_fusion.HmMatcherConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HmMatcherConf* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HmMatcherConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.mid_fusion.HmMatcherConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.mid_fusion.HmMatcherConf)
    MergeFrom(*source);
  }
}

void HmMatcherConf::MergeFrom(const HmMatcherConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.mid_fusion.HmMatcherConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_match_distance()) {
      set_max_match_distance(from.max_match_distance());
    }
    if (from.has_bound_match_distance()) {
      set_bound_match_distance(from.bound_match_distance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HmMatcherConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.mid_fusion.HmMatcherConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HmMatcherConf::CopyFrom(const HmMatcherConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.mid_fusion.HmMatcherConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HmMatcherConf::IsInitialized() const {

  return true;
}

void HmMatcherConf::Swap(HmMatcherConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HmMatcherConf::InternalSwap(HmMatcherConf* other) {
  std::swap(max_match_distance_, other->max_match_distance_);
  std::swap(bound_match_distance_, other->bound_match_distance_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HmMatcherConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HmMatcherConf_descriptor_;
  metadata.reflection = HmMatcherConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HmMatcherConf

// optional double max_match_distance = 1;
bool HmMatcherConf::has_max_match_distance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HmMatcherConf::set_has_max_match_distance() {
  _has_bits_[0] |= 0x00000001u;
}
void HmMatcherConf::clear_has_max_match_distance() {
  _has_bits_[0] &= ~0x00000001u;
}
void HmMatcherConf::clear_max_match_distance() {
  max_match_distance_ = 0;
  clear_has_max_match_distance();
}
 double HmMatcherConf::max_match_distance() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.HmMatcherConf.max_match_distance)
  return max_match_distance_;
}
 void HmMatcherConf::set_max_match_distance(double value) {
  set_has_max_match_distance();
  max_match_distance_ = value;
  // @@protoc_insertion_point(field_set:perception.mid_fusion.HmMatcherConf.max_match_distance)
}

// optional double bound_match_distance = 2;
bool HmMatcherConf::has_bound_match_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HmMatcherConf::set_has_bound_match_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void HmMatcherConf::clear_has_bound_match_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void HmMatcherConf::clear_bound_match_distance() {
  bound_match_distance_ = 0;
  clear_has_bound_match_distance();
}
 double HmMatcherConf::bound_match_distance() const {
  // @@protoc_insertion_point(field_get:perception.mid_fusion.HmMatcherConf.bound_match_distance)
  return bound_match_distance_;
}
 void HmMatcherConf::set_bound_match_distance(double value) {
  set_has_bound_match_distance();
  bound_match_distance_ = value;
  // @@protoc_insertion_point(field_set:perception.mid_fusion.HmMatcherConf.bound_match_distance)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mid_fusion
}  // namespace perception

// @@protoc_insertion_point(global_scope)
