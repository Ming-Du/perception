// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion_component_config.proto

#ifndef PROTOBUF_fusion_5fcomponent_5fconfig_2eproto__INCLUDED
#define PROTOBUF_fusion_5fcomponent_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace perception {
namespace base {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_fusion_5fcomponent_5fconfig_2eproto();
void protobuf_AssignDesc_fusion_5fcomponent_5fconfig_2eproto();
void protobuf_ShutdownFile_fusion_5fcomponent_5fconfig_2eproto();

class FusionComponentConfig;

// ===================================================================

class FusionComponentConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:perception.base.FusionComponentConfig) */ {
 public:
  FusionComponentConfig();
  virtual ~FusionComponentConfig();

  FusionComponentConfig(const FusionComponentConfig& from);

  inline FusionComponentConfig& operator=(const FusionComponentConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FusionComponentConfig& default_instance();

  void Swap(FusionComponentConfig* other);

  // implements Message ----------------------------------------------

  inline FusionComponentConfig* New() const { return New(NULL); }

  FusionComponentConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FusionComponentConfig& from);
  void MergeFrom(const FusionComponentConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FusionComponentConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string fusion_method = 1;
  bool has_fusion_method() const;
  void clear_fusion_method();
  static const int kFusionMethodFieldNumber = 1;
  const ::std::string& fusion_method() const;
  void set_fusion_method(const ::std::string& value);
  void set_fusion_method(const char* value);
  void set_fusion_method(const char* value, size_t size);
  ::std::string* mutable_fusion_method();
  ::std::string* release_fusion_method();
  void set_allocated_fusion_method(::std::string* fusion_method);

  // repeated string fusion_main_sensors = 2;
  int fusion_main_sensors_size() const;
  void clear_fusion_main_sensors();
  static const int kFusionMainSensorsFieldNumber = 2;
  const ::std::string& fusion_main_sensors(int index) const;
  ::std::string* mutable_fusion_main_sensors(int index);
  void set_fusion_main_sensors(int index, const ::std::string& value);
  void set_fusion_main_sensors(int index, const char* value);
  void set_fusion_main_sensors(int index, const char* value, size_t size);
  ::std::string* add_fusion_main_sensors();
  void add_fusion_main_sensors(const ::std::string& value);
  void add_fusion_main_sensors(const char* value);
  void add_fusion_main_sensors(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fusion_main_sensors() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fusion_main_sensors();

  // optional bool object_in_roi_check = 3;
  bool has_object_in_roi_check() const;
  void clear_object_in_roi_check();
  static const int kObjectInRoiCheckFieldNumber = 3;
  bool object_in_roi_check() const;
  void set_object_in_roi_check(bool value);

  // optional double radius_for_roi_object_check = 4;
  bool has_radius_for_roi_object_check() const;
  void clear_radius_for_roi_object_check();
  static const int kRadiusForRoiObjectCheckFieldNumber = 4;
  double radius_for_roi_object_check() const;
  void set_radius_for_roi_object_check(double value);

  // optional string output_obstacles_channel_name = 5 [default = "/perception/vehicle/obstacles"];
  bool has_output_obstacles_channel_name() const;
  void clear_output_obstacles_channel_name();
  static const int kOutputObstaclesChannelNameFieldNumber = 5;
  const ::std::string& output_obstacles_channel_name() const;
  void set_output_obstacles_channel_name(const ::std::string& value);
  void set_output_obstacles_channel_name(const char* value);
  void set_output_obstacles_channel_name(const char* value, size_t size);
  ::std::string* mutable_output_obstacles_channel_name();
  ::std::string* release_output_obstacles_channel_name();
  void set_allocated_output_obstacles_channel_name(::std::string* output_obstacles_channel_name);

  // optional string output_viz_fused_content_channel_name = 6 [default = "/perception/inner/visualization/FusedObjects"];
  bool has_output_viz_fused_content_channel_name() const;
  void clear_output_viz_fused_content_channel_name();
  static const int kOutputVizFusedContentChannelNameFieldNumber = 6;
  const ::std::string& output_viz_fused_content_channel_name() const;
  void set_output_viz_fused_content_channel_name(const ::std::string& value);
  void set_output_viz_fused_content_channel_name(const char* value);
  void set_output_viz_fused_content_channel_name(const char* value, size_t size);
  ::std::string* mutable_output_viz_fused_content_channel_name();
  ::std::string* release_output_viz_fused_content_channel_name();
  void set_allocated_output_viz_fused_content_channel_name(::std::string* output_viz_fused_content_channel_name);

  // @@protoc_insertion_point(class_scope:perception.base.FusionComponentConfig)
 private:
  inline void set_has_fusion_method();
  inline void clear_has_fusion_method();
  inline void set_has_object_in_roi_check();
  inline void clear_has_object_in_roi_check();
  inline void set_has_radius_for_roi_object_check();
  inline void clear_has_radius_for_roi_object_check();
  inline void set_has_output_obstacles_channel_name();
  inline void clear_has_output_obstacles_channel_name();
  inline void set_has_output_viz_fused_content_channel_name();
  inline void clear_has_output_viz_fused_content_channel_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fusion_method_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fusion_main_sensors_;
  double radius_for_roi_object_check_;
  static ::std::string* _default_output_obstacles_channel_name_;
  ::google::protobuf::internal::ArenaStringPtr output_obstacles_channel_name_;
  static ::std::string* _default_output_viz_fused_content_channel_name_;
  ::google::protobuf::internal::ArenaStringPtr output_viz_fused_content_channel_name_;
  bool object_in_roi_check_;
  friend void  protobuf_AddDesc_fusion_5fcomponent_5fconfig_2eproto();
  friend void protobuf_AssignDesc_fusion_5fcomponent_5fconfig_2eproto();
  friend void protobuf_ShutdownFile_fusion_5fcomponent_5fconfig_2eproto();

  void InitAsDefaultInstance();
  static FusionComponentConfig* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FusionComponentConfig

// optional string fusion_method = 1;
inline bool FusionComponentConfig::has_fusion_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FusionComponentConfig::set_has_fusion_method() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FusionComponentConfig::clear_has_fusion_method() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FusionComponentConfig::clear_fusion_method() {
  fusion_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fusion_method();
}
inline const ::std::string& FusionComponentConfig::fusion_method() const {
  // @@protoc_insertion_point(field_get:perception.base.FusionComponentConfig.fusion_method)
  return fusion_method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FusionComponentConfig::set_fusion_method(const ::std::string& value) {
  set_has_fusion_method();
  fusion_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.base.FusionComponentConfig.fusion_method)
}
inline void FusionComponentConfig::set_fusion_method(const char* value) {
  set_has_fusion_method();
  fusion_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.base.FusionComponentConfig.fusion_method)
}
inline void FusionComponentConfig::set_fusion_method(const char* value, size_t size) {
  set_has_fusion_method();
  fusion_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.base.FusionComponentConfig.fusion_method)
}
inline ::std::string* FusionComponentConfig::mutable_fusion_method() {
  set_has_fusion_method();
  // @@protoc_insertion_point(field_mutable:perception.base.FusionComponentConfig.fusion_method)
  return fusion_method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FusionComponentConfig::release_fusion_method() {
  // @@protoc_insertion_point(field_release:perception.base.FusionComponentConfig.fusion_method)
  clear_has_fusion_method();
  return fusion_method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FusionComponentConfig::set_allocated_fusion_method(::std::string* fusion_method) {
  if (fusion_method != NULL) {
    set_has_fusion_method();
  } else {
    clear_has_fusion_method();
  }
  fusion_method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fusion_method);
  // @@protoc_insertion_point(field_set_allocated:perception.base.FusionComponentConfig.fusion_method)
}

// repeated string fusion_main_sensors = 2;
inline int FusionComponentConfig::fusion_main_sensors_size() const {
  return fusion_main_sensors_.size();
}
inline void FusionComponentConfig::clear_fusion_main_sensors() {
  fusion_main_sensors_.Clear();
}
inline const ::std::string& FusionComponentConfig::fusion_main_sensors(int index) const {
  // @@protoc_insertion_point(field_get:perception.base.FusionComponentConfig.fusion_main_sensors)
  return fusion_main_sensors_.Get(index);
}
inline ::std::string* FusionComponentConfig::mutable_fusion_main_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:perception.base.FusionComponentConfig.fusion_main_sensors)
  return fusion_main_sensors_.Mutable(index);
}
inline void FusionComponentConfig::set_fusion_main_sensors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perception.base.FusionComponentConfig.fusion_main_sensors)
  fusion_main_sensors_.Mutable(index)->assign(value);
}
inline void FusionComponentConfig::set_fusion_main_sensors(int index, const char* value) {
  fusion_main_sensors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perception.base.FusionComponentConfig.fusion_main_sensors)
}
inline void FusionComponentConfig::set_fusion_main_sensors(int index, const char* value, size_t size) {
  fusion_main_sensors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perception.base.FusionComponentConfig.fusion_main_sensors)
}
inline ::std::string* FusionComponentConfig::add_fusion_main_sensors() {
  // @@protoc_insertion_point(field_add_mutable:perception.base.FusionComponentConfig.fusion_main_sensors)
  return fusion_main_sensors_.Add();
}
inline void FusionComponentConfig::add_fusion_main_sensors(const ::std::string& value) {
  fusion_main_sensors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perception.base.FusionComponentConfig.fusion_main_sensors)
}
inline void FusionComponentConfig::add_fusion_main_sensors(const char* value) {
  fusion_main_sensors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perception.base.FusionComponentConfig.fusion_main_sensors)
}
inline void FusionComponentConfig::add_fusion_main_sensors(const char* value, size_t size) {
  fusion_main_sensors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perception.base.FusionComponentConfig.fusion_main_sensors)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FusionComponentConfig::fusion_main_sensors() const {
  // @@protoc_insertion_point(field_list:perception.base.FusionComponentConfig.fusion_main_sensors)
  return fusion_main_sensors_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FusionComponentConfig::mutable_fusion_main_sensors() {
  // @@protoc_insertion_point(field_mutable_list:perception.base.FusionComponentConfig.fusion_main_sensors)
  return &fusion_main_sensors_;
}

// optional bool object_in_roi_check = 3;
inline bool FusionComponentConfig::has_object_in_roi_check() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FusionComponentConfig::set_has_object_in_roi_check() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FusionComponentConfig::clear_has_object_in_roi_check() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FusionComponentConfig::clear_object_in_roi_check() {
  object_in_roi_check_ = false;
  clear_has_object_in_roi_check();
}
inline bool FusionComponentConfig::object_in_roi_check() const {
  // @@protoc_insertion_point(field_get:perception.base.FusionComponentConfig.object_in_roi_check)
  return object_in_roi_check_;
}
inline void FusionComponentConfig::set_object_in_roi_check(bool value) {
  set_has_object_in_roi_check();
  object_in_roi_check_ = value;
  // @@protoc_insertion_point(field_set:perception.base.FusionComponentConfig.object_in_roi_check)
}

// optional double radius_for_roi_object_check = 4;
inline bool FusionComponentConfig::has_radius_for_roi_object_check() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FusionComponentConfig::set_has_radius_for_roi_object_check() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FusionComponentConfig::clear_has_radius_for_roi_object_check() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FusionComponentConfig::clear_radius_for_roi_object_check() {
  radius_for_roi_object_check_ = 0;
  clear_has_radius_for_roi_object_check();
}
inline double FusionComponentConfig::radius_for_roi_object_check() const {
  // @@protoc_insertion_point(field_get:perception.base.FusionComponentConfig.radius_for_roi_object_check)
  return radius_for_roi_object_check_;
}
inline void FusionComponentConfig::set_radius_for_roi_object_check(double value) {
  set_has_radius_for_roi_object_check();
  radius_for_roi_object_check_ = value;
  // @@protoc_insertion_point(field_set:perception.base.FusionComponentConfig.radius_for_roi_object_check)
}

// optional string output_obstacles_channel_name = 5 [default = "/perception/vehicle/obstacles"];
inline bool FusionComponentConfig::has_output_obstacles_channel_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FusionComponentConfig::set_has_output_obstacles_channel_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FusionComponentConfig::clear_has_output_obstacles_channel_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FusionComponentConfig::clear_output_obstacles_channel_name() {
  output_obstacles_channel_name_.ClearToDefaultNoArena(_default_output_obstacles_channel_name_);
  clear_has_output_obstacles_channel_name();
}
inline const ::std::string& FusionComponentConfig::output_obstacles_channel_name() const {
  // @@protoc_insertion_point(field_get:perception.base.FusionComponentConfig.output_obstacles_channel_name)
  return output_obstacles_channel_name_.GetNoArena(_default_output_obstacles_channel_name_);
}
inline void FusionComponentConfig::set_output_obstacles_channel_name(const ::std::string& value) {
  set_has_output_obstacles_channel_name();
  output_obstacles_channel_name_.SetNoArena(_default_output_obstacles_channel_name_, value);
  // @@protoc_insertion_point(field_set:perception.base.FusionComponentConfig.output_obstacles_channel_name)
}
inline void FusionComponentConfig::set_output_obstacles_channel_name(const char* value) {
  set_has_output_obstacles_channel_name();
  output_obstacles_channel_name_.SetNoArena(_default_output_obstacles_channel_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.base.FusionComponentConfig.output_obstacles_channel_name)
}
inline void FusionComponentConfig::set_output_obstacles_channel_name(const char* value, size_t size) {
  set_has_output_obstacles_channel_name();
  output_obstacles_channel_name_.SetNoArena(_default_output_obstacles_channel_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.base.FusionComponentConfig.output_obstacles_channel_name)
}
inline ::std::string* FusionComponentConfig::mutable_output_obstacles_channel_name() {
  set_has_output_obstacles_channel_name();
  // @@protoc_insertion_point(field_mutable:perception.base.FusionComponentConfig.output_obstacles_channel_name)
  return output_obstacles_channel_name_.MutableNoArena(_default_output_obstacles_channel_name_);
}
inline ::std::string* FusionComponentConfig::release_output_obstacles_channel_name() {
  // @@protoc_insertion_point(field_release:perception.base.FusionComponentConfig.output_obstacles_channel_name)
  clear_has_output_obstacles_channel_name();
  return output_obstacles_channel_name_.ReleaseNoArena(_default_output_obstacles_channel_name_);
}
inline void FusionComponentConfig::set_allocated_output_obstacles_channel_name(::std::string* output_obstacles_channel_name) {
  if (output_obstacles_channel_name != NULL) {
    set_has_output_obstacles_channel_name();
  } else {
    clear_has_output_obstacles_channel_name();
  }
  output_obstacles_channel_name_.SetAllocatedNoArena(_default_output_obstacles_channel_name_, output_obstacles_channel_name);
  // @@protoc_insertion_point(field_set_allocated:perception.base.FusionComponentConfig.output_obstacles_channel_name)
}

// optional string output_viz_fused_content_channel_name = 6 [default = "/perception/inner/visualization/FusedObjects"];
inline bool FusionComponentConfig::has_output_viz_fused_content_channel_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FusionComponentConfig::set_has_output_viz_fused_content_channel_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FusionComponentConfig::clear_has_output_viz_fused_content_channel_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FusionComponentConfig::clear_output_viz_fused_content_channel_name() {
  output_viz_fused_content_channel_name_.ClearToDefaultNoArena(_default_output_viz_fused_content_channel_name_);
  clear_has_output_viz_fused_content_channel_name();
}
inline const ::std::string& FusionComponentConfig::output_viz_fused_content_channel_name() const {
  // @@protoc_insertion_point(field_get:perception.base.FusionComponentConfig.output_viz_fused_content_channel_name)
  return output_viz_fused_content_channel_name_.GetNoArena(_default_output_viz_fused_content_channel_name_);
}
inline void FusionComponentConfig::set_output_viz_fused_content_channel_name(const ::std::string& value) {
  set_has_output_viz_fused_content_channel_name();
  output_viz_fused_content_channel_name_.SetNoArena(_default_output_viz_fused_content_channel_name_, value);
  // @@protoc_insertion_point(field_set:perception.base.FusionComponentConfig.output_viz_fused_content_channel_name)
}
inline void FusionComponentConfig::set_output_viz_fused_content_channel_name(const char* value) {
  set_has_output_viz_fused_content_channel_name();
  output_viz_fused_content_channel_name_.SetNoArena(_default_output_viz_fused_content_channel_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.base.FusionComponentConfig.output_viz_fused_content_channel_name)
}
inline void FusionComponentConfig::set_output_viz_fused_content_channel_name(const char* value, size_t size) {
  set_has_output_viz_fused_content_channel_name();
  output_viz_fused_content_channel_name_.SetNoArena(_default_output_viz_fused_content_channel_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.base.FusionComponentConfig.output_viz_fused_content_channel_name)
}
inline ::std::string* FusionComponentConfig::mutable_output_viz_fused_content_channel_name() {
  set_has_output_viz_fused_content_channel_name();
  // @@protoc_insertion_point(field_mutable:perception.base.FusionComponentConfig.output_viz_fused_content_channel_name)
  return output_viz_fused_content_channel_name_.MutableNoArena(_default_output_viz_fused_content_channel_name_);
}
inline ::std::string* FusionComponentConfig::release_output_viz_fused_content_channel_name() {
  // @@protoc_insertion_point(field_release:perception.base.FusionComponentConfig.output_viz_fused_content_channel_name)
  clear_has_output_viz_fused_content_channel_name();
  return output_viz_fused_content_channel_name_.ReleaseNoArena(_default_output_viz_fused_content_channel_name_);
}
inline void FusionComponentConfig::set_allocated_output_viz_fused_content_channel_name(::std::string* output_viz_fused_content_channel_name) {
  if (output_viz_fused_content_channel_name != NULL) {
    set_has_output_viz_fused_content_channel_name();
  } else {
    clear_has_output_viz_fused_content_channel_name();
  }
  output_viz_fused_content_channel_name_.SetAllocatedNoArena(_default_output_viz_fused_content_channel_name_, output_viz_fused_content_channel_name);
  // @@protoc_insertion_point(field_set_allocated:perception.base.FusionComponentConfig.output_viz_fused_content_channel_name)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace perception

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_fusion_5fcomponent_5fconfig_2eproto__INCLUDED
