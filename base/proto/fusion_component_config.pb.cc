// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fusion_component_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fusion_component_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace perception {
namespace base {

namespace {

const ::google::protobuf::Descriptor* FusionComponentConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FusionComponentConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_fusion_5fcomponent_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_fusion_5fcomponent_5fconfig_2eproto() {
  protobuf_AddDesc_fusion_5fcomponent_5fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fusion_component_config.proto");
  GOOGLE_CHECK(file != NULL);
  FusionComponentConfig_descriptor_ = file->message_type(0);
  static const int FusionComponentConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentConfig, fusion_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentConfig, fusion_main_sensors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentConfig, object_in_roi_check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentConfig, radius_for_roi_object_check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentConfig, output_obstacles_channel_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentConfig, output_viz_fused_content_channel_name_),
  };
  FusionComponentConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FusionComponentConfig_descriptor_,
      FusionComponentConfig::default_instance_,
      FusionComponentConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(FusionComponentConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fusion_5fcomponent_5fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FusionComponentConfig_descriptor_, &FusionComponentConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fusion_5fcomponent_5fconfig_2eproto() {
  delete FusionComponentConfig::default_instance_;
  delete FusionComponentConfig_reflection_;
  delete FusionComponentConfig::_default_output_obstacles_channel_name_;
  delete FusionComponentConfig::_default_output_viz_fused_content_channel_name_;
}

void protobuf_AddDesc_fusion_5fcomponent_5fconfig_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_fusion_5fcomponent_5fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035fusion_component_config.proto\022\017percept"
    "ion.base\"\260\002\n\025FusionComponentConfig\022\025\n\rfu"
    "sion_method\030\001 \001(\t\022\033\n\023fusion_main_sensors"
    "\030\002 \003(\t\022\033\n\023object_in_roi_check\030\003 \001(\010\022#\n\033r"
    "adius_for_roi_object_check\030\004 \001(\001\022D\n\035outp"
    "ut_obstacles_channel_name\030\005 \001(\t:\035/percep"
    "tion/vehicle/obstacles\022[\n%output_viz_fus"
    "ed_content_channel_name\030\006 \001(\t:,/percepti"
    "on/inner/visualization/FusedObjects", 355);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fusion_component_config.proto", &protobuf_RegisterTypes);
  FusionComponentConfig::_default_output_obstacles_channel_name_ =
      new ::std::string("/perception/vehicle/obstacles", 29);
  FusionComponentConfig::_default_output_viz_fused_content_channel_name_ =
      new ::std::string("/perception/inner/visualization/FusedObjects", 44);
  FusionComponentConfig::default_instance_ = new FusionComponentConfig();
  FusionComponentConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fusion_5fcomponent_5fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fusion_5fcomponent_5fconfig_2eproto {
  StaticDescriptorInitializer_fusion_5fcomponent_5fconfig_2eproto() {
    protobuf_AddDesc_fusion_5fcomponent_5fconfig_2eproto();
  }
} static_descriptor_initializer_fusion_5fcomponent_5fconfig_2eproto_;

// ===================================================================

::std::string* FusionComponentConfig::_default_output_obstacles_channel_name_ = NULL;
::std::string* FusionComponentConfig::_default_output_viz_fused_content_channel_name_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FusionComponentConfig::kFusionMethodFieldNumber;
const int FusionComponentConfig::kFusionMainSensorsFieldNumber;
const int FusionComponentConfig::kObjectInRoiCheckFieldNumber;
const int FusionComponentConfig::kRadiusForRoiObjectCheckFieldNumber;
const int FusionComponentConfig::kOutputObstaclesChannelNameFieldNumber;
const int FusionComponentConfig::kOutputVizFusedContentChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FusionComponentConfig::FusionComponentConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.base.FusionComponentConfig)
}

void FusionComponentConfig::InitAsDefaultInstance() {
}

FusionComponentConfig::FusionComponentConfig(const FusionComponentConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.base.FusionComponentConfig)
}

void FusionComponentConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  fusion_method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_in_roi_check_ = false;
  radius_for_roi_object_check_ = 0;
  output_obstacles_channel_name_.UnsafeSetDefault(_default_output_obstacles_channel_name_);
  output_viz_fused_content_channel_name_.UnsafeSetDefault(_default_output_viz_fused_content_channel_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FusionComponentConfig::~FusionComponentConfig() {
  // @@protoc_insertion_point(destructor:perception.base.FusionComponentConfig)
  SharedDtor();
}

void FusionComponentConfig::SharedDtor() {
  fusion_method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_obstacles_channel_name_.DestroyNoArena(_default_output_obstacles_channel_name_);
  output_viz_fused_content_channel_name_.DestroyNoArena(_default_output_viz_fused_content_channel_name_);
  if (this != default_instance_) {
  }
}

void FusionComponentConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FusionComponentConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FusionComponentConfig_descriptor_;
}

const FusionComponentConfig& FusionComponentConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_fusion_5fcomponent_5fconfig_2eproto();
  return *default_instance_;
}

FusionComponentConfig* FusionComponentConfig::default_instance_ = NULL;

FusionComponentConfig* FusionComponentConfig::New(::google::protobuf::Arena* arena) const {
  FusionComponentConfig* n = new FusionComponentConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FusionComponentConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.base.FusionComponentConfig)
  if (_has_bits_[0 / 32] & 61u) {
    if (has_fusion_method()) {
      fusion_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    object_in_roi_check_ = false;
    radius_for_roi_object_check_ = 0;
    if (has_output_obstacles_channel_name()) {
      output_obstacles_channel_name_.ClearToDefaultNoArena(_default_output_obstacles_channel_name_);
    }
    if (has_output_viz_fused_content_channel_name()) {
      output_viz_fused_content_channel_name_.ClearToDefaultNoArena(_default_output_viz_fused_content_channel_name_);
    }
  }
  fusion_main_sensors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FusionComponentConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.base.FusionComponentConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fusion_method = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fusion_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fusion_method().data(), this->fusion_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.base.FusionComponentConfig.fusion_method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fusion_main_sensors;
        break;
      }

      // repeated string fusion_main_sensors = 2;
      case 2: {
        if (tag == 18) {
         parse_fusion_main_sensors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fusion_main_sensors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fusion_main_sensors(this->fusion_main_sensors_size() - 1).data(),
            this->fusion_main_sensors(this->fusion_main_sensors_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.base.FusionComponentConfig.fusion_main_sensors");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fusion_main_sensors;
        if (input->ExpectTag(24)) goto parse_object_in_roi_check;
        break;
      }

      // optional bool object_in_roi_check = 3;
      case 3: {
        if (tag == 24) {
         parse_object_in_roi_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &object_in_roi_check_)));
          set_has_object_in_roi_check();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_radius_for_roi_object_check;
        break;
      }

      // optional double radius_for_roi_object_check = 4;
      case 4: {
        if (tag == 33) {
         parse_radius_for_roi_object_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_for_roi_object_check_)));
          set_has_radius_for_roi_object_check();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_output_obstacles_channel_name;
        break;
      }

      // optional string output_obstacles_channel_name = 5 [default = "/perception/vehicle/obstacles"];
      case 5: {
        if (tag == 42) {
         parse_output_obstacles_channel_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_obstacles_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_obstacles_channel_name().data(), this->output_obstacles_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.base.FusionComponentConfig.output_obstacles_channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_output_viz_fused_content_channel_name;
        break;
      }

      // optional string output_viz_fused_content_channel_name = 6 [default = "/perception/inner/visualization/FusedObjects"];
      case 6: {
        if (tag == 50) {
         parse_output_viz_fused_content_channel_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_viz_fused_content_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_viz_fused_content_channel_name().data(), this->output_viz_fused_content_channel_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.base.FusionComponentConfig.output_viz_fused_content_channel_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.base.FusionComponentConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.base.FusionComponentConfig)
  return false;
#undef DO_
}

void FusionComponentConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.base.FusionComponentConfig)
  // optional string fusion_method = 1;
  if (has_fusion_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fusion_method().data(), this->fusion_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.base.FusionComponentConfig.fusion_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fusion_method(), output);
  }

  // repeated string fusion_main_sensors = 2;
  for (int i = 0; i < this->fusion_main_sensors_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fusion_main_sensors(i).data(), this->fusion_main_sensors(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.base.FusionComponentConfig.fusion_main_sensors");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fusion_main_sensors(i), output);
  }

  // optional bool object_in_roi_check = 3;
  if (has_object_in_roi_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->object_in_roi_check(), output);
  }

  // optional double radius_for_roi_object_check = 4;
  if (has_radius_for_roi_object_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->radius_for_roi_object_check(), output);
  }

  // optional string output_obstacles_channel_name = 5 [default = "/perception/vehicle/obstacles"];
  if (has_output_obstacles_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_obstacles_channel_name().data(), this->output_obstacles_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.base.FusionComponentConfig.output_obstacles_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->output_obstacles_channel_name(), output);
  }

  // optional string output_viz_fused_content_channel_name = 6 [default = "/perception/inner/visualization/FusedObjects"];
  if (has_output_viz_fused_content_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_viz_fused_content_channel_name().data(), this->output_viz_fused_content_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.base.FusionComponentConfig.output_viz_fused_content_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->output_viz_fused_content_channel_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.base.FusionComponentConfig)
}

::google::protobuf::uint8* FusionComponentConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.base.FusionComponentConfig)
  // optional string fusion_method = 1;
  if (has_fusion_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fusion_method().data(), this->fusion_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.base.FusionComponentConfig.fusion_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fusion_method(), target);
  }

  // repeated string fusion_main_sensors = 2;
  for (int i = 0; i < this->fusion_main_sensors_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fusion_main_sensors(i).data(), this->fusion_main_sensors(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.base.FusionComponentConfig.fusion_main_sensors");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->fusion_main_sensors(i), target);
  }

  // optional bool object_in_roi_check = 3;
  if (has_object_in_roi_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->object_in_roi_check(), target);
  }

  // optional double radius_for_roi_object_check = 4;
  if (has_radius_for_roi_object_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->radius_for_roi_object_check(), target);
  }

  // optional string output_obstacles_channel_name = 5 [default = "/perception/vehicle/obstacles"];
  if (has_output_obstacles_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_obstacles_channel_name().data(), this->output_obstacles_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.base.FusionComponentConfig.output_obstacles_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->output_obstacles_channel_name(), target);
  }

  // optional string output_viz_fused_content_channel_name = 6 [default = "/perception/inner/visualization/FusedObjects"];
  if (has_output_viz_fused_content_channel_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_viz_fused_content_channel_name().data(), this->output_viz_fused_content_channel_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.base.FusionComponentConfig.output_viz_fused_content_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->output_viz_fused_content_channel_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.base.FusionComponentConfig)
  return target;
}

int FusionComponentConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perception.base.FusionComponentConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 61u) {
    // optional string fusion_method = 1;
    if (has_fusion_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fusion_method());
    }

    // optional bool object_in_roi_check = 3;
    if (has_object_in_roi_check()) {
      total_size += 1 + 1;
    }

    // optional double radius_for_roi_object_check = 4;
    if (has_radius_for_roi_object_check()) {
      total_size += 1 + 8;
    }

    // optional string output_obstacles_channel_name = 5 [default = "/perception/vehicle/obstacles"];
    if (has_output_obstacles_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_obstacles_channel_name());
    }

    // optional string output_viz_fused_content_channel_name = 6 [default = "/perception/inner/visualization/FusedObjects"];
    if (has_output_viz_fused_content_channel_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_viz_fused_content_channel_name());
    }

  }
  // repeated string fusion_main_sensors = 2;
  total_size += 1 * this->fusion_main_sensors_size();
  for (int i = 0; i < this->fusion_main_sensors_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fusion_main_sensors(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FusionComponentConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.base.FusionComponentConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FusionComponentConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FusionComponentConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.base.FusionComponentConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.base.FusionComponentConfig)
    MergeFrom(*source);
  }
}

void FusionComponentConfig::MergeFrom(const FusionComponentConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.base.FusionComponentConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  fusion_main_sensors_.MergeFrom(from.fusion_main_sensors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fusion_method()) {
      set_has_fusion_method();
      fusion_method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fusion_method_);
    }
    if (from.has_object_in_roi_check()) {
      set_object_in_roi_check(from.object_in_roi_check());
    }
    if (from.has_radius_for_roi_object_check()) {
      set_radius_for_roi_object_check(from.radius_for_roi_object_check());
    }
    if (from.has_output_obstacles_channel_name()) {
      set_has_output_obstacles_channel_name();
      output_obstacles_channel_name_.AssignWithDefault(_default_output_obstacles_channel_name_, from.output_obstacles_channel_name_);
    }
    if (from.has_output_viz_fused_content_channel_name()) {
      set_has_output_viz_fused_content_channel_name();
      output_viz_fused_content_channel_name_.AssignWithDefault(_default_output_viz_fused_content_channel_name_, from.output_viz_fused_content_channel_name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FusionComponentConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.base.FusionComponentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FusionComponentConfig::CopyFrom(const FusionComponentConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.base.FusionComponentConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionComponentConfig::IsInitialized() const {

  return true;
}

void FusionComponentConfig::Swap(FusionComponentConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FusionComponentConfig::InternalSwap(FusionComponentConfig* other) {
  fusion_method_.Swap(&other->fusion_method_);
  fusion_main_sensors_.UnsafeArenaSwap(&other->fusion_main_sensors_);
  std::swap(object_in_roi_check_, other->object_in_roi_check_);
  std::swap(radius_for_roi_object_check_, other->radius_for_roi_object_check_);
  output_obstacles_channel_name_.Swap(&other->output_obstacles_channel_name_);
  output_viz_fused_content_channel_name_.Swap(&other->output_viz_fused_content_channel_name_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FusionComponentConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FusionComponentConfig_descriptor_;
  metadata.reflection = FusionComponentConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FusionComponentConfig

// optional string fusion_method = 1;
bool FusionComponentConfig::has_fusion_method() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FusionComponentConfig::set_has_fusion_method() {
  _has_bits_[0] |= 0x00000001u;
}
void FusionComponentConfig::clear_has_fusion_method() {
  _has_bits_[0] &= ~0x00000001u;
}
void FusionComponentConfig::clear_fusion_method() {
  fusion_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fusion_method();
}
 const ::std::string& FusionComponentConfig::fusion_method() const {
  // @@protoc_insertion_point(field_get:perception.base.FusionComponentConfig.fusion_method)
  return fusion_method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FusionComponentConfig::set_fusion_method(const ::std::string& value) {
  set_has_fusion_method();
  fusion_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.base.FusionComponentConfig.fusion_method)
}
 void FusionComponentConfig::set_fusion_method(const char* value) {
  set_has_fusion_method();
  fusion_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.base.FusionComponentConfig.fusion_method)
}
 void FusionComponentConfig::set_fusion_method(const char* value, size_t size) {
  set_has_fusion_method();
  fusion_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.base.FusionComponentConfig.fusion_method)
}
 ::std::string* FusionComponentConfig::mutable_fusion_method() {
  set_has_fusion_method();
  // @@protoc_insertion_point(field_mutable:perception.base.FusionComponentConfig.fusion_method)
  return fusion_method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FusionComponentConfig::release_fusion_method() {
  // @@protoc_insertion_point(field_release:perception.base.FusionComponentConfig.fusion_method)
  clear_has_fusion_method();
  return fusion_method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FusionComponentConfig::set_allocated_fusion_method(::std::string* fusion_method) {
  if (fusion_method != NULL) {
    set_has_fusion_method();
  } else {
    clear_has_fusion_method();
  }
  fusion_method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fusion_method);
  // @@protoc_insertion_point(field_set_allocated:perception.base.FusionComponentConfig.fusion_method)
}

// repeated string fusion_main_sensors = 2;
int FusionComponentConfig::fusion_main_sensors_size() const {
  return fusion_main_sensors_.size();
}
void FusionComponentConfig::clear_fusion_main_sensors() {
  fusion_main_sensors_.Clear();
}
 const ::std::string& FusionComponentConfig::fusion_main_sensors(int index) const {
  // @@protoc_insertion_point(field_get:perception.base.FusionComponentConfig.fusion_main_sensors)
  return fusion_main_sensors_.Get(index);
}
 ::std::string* FusionComponentConfig::mutable_fusion_main_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:perception.base.FusionComponentConfig.fusion_main_sensors)
  return fusion_main_sensors_.Mutable(index);
}
 void FusionComponentConfig::set_fusion_main_sensors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perception.base.FusionComponentConfig.fusion_main_sensors)
  fusion_main_sensors_.Mutable(index)->assign(value);
}
 void FusionComponentConfig::set_fusion_main_sensors(int index, const char* value) {
  fusion_main_sensors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perception.base.FusionComponentConfig.fusion_main_sensors)
}
 void FusionComponentConfig::set_fusion_main_sensors(int index, const char* value, size_t size) {
  fusion_main_sensors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perception.base.FusionComponentConfig.fusion_main_sensors)
}
 ::std::string* FusionComponentConfig::add_fusion_main_sensors() {
  // @@protoc_insertion_point(field_add_mutable:perception.base.FusionComponentConfig.fusion_main_sensors)
  return fusion_main_sensors_.Add();
}
 void FusionComponentConfig::add_fusion_main_sensors(const ::std::string& value) {
  fusion_main_sensors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perception.base.FusionComponentConfig.fusion_main_sensors)
}
 void FusionComponentConfig::add_fusion_main_sensors(const char* value) {
  fusion_main_sensors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perception.base.FusionComponentConfig.fusion_main_sensors)
}
 void FusionComponentConfig::add_fusion_main_sensors(const char* value, size_t size) {
  fusion_main_sensors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perception.base.FusionComponentConfig.fusion_main_sensors)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
FusionComponentConfig::fusion_main_sensors() const {
  // @@protoc_insertion_point(field_list:perception.base.FusionComponentConfig.fusion_main_sensors)
  return fusion_main_sensors_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
FusionComponentConfig::mutable_fusion_main_sensors() {
  // @@protoc_insertion_point(field_mutable_list:perception.base.FusionComponentConfig.fusion_main_sensors)
  return &fusion_main_sensors_;
}

// optional bool object_in_roi_check = 3;
bool FusionComponentConfig::has_object_in_roi_check() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FusionComponentConfig::set_has_object_in_roi_check() {
  _has_bits_[0] |= 0x00000004u;
}
void FusionComponentConfig::clear_has_object_in_roi_check() {
  _has_bits_[0] &= ~0x00000004u;
}
void FusionComponentConfig::clear_object_in_roi_check() {
  object_in_roi_check_ = false;
  clear_has_object_in_roi_check();
}
 bool FusionComponentConfig::object_in_roi_check() const {
  // @@protoc_insertion_point(field_get:perception.base.FusionComponentConfig.object_in_roi_check)
  return object_in_roi_check_;
}
 void FusionComponentConfig::set_object_in_roi_check(bool value) {
  set_has_object_in_roi_check();
  object_in_roi_check_ = value;
  // @@protoc_insertion_point(field_set:perception.base.FusionComponentConfig.object_in_roi_check)
}

// optional double radius_for_roi_object_check = 4;
bool FusionComponentConfig::has_radius_for_roi_object_check() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FusionComponentConfig::set_has_radius_for_roi_object_check() {
  _has_bits_[0] |= 0x00000008u;
}
void FusionComponentConfig::clear_has_radius_for_roi_object_check() {
  _has_bits_[0] &= ~0x00000008u;
}
void FusionComponentConfig::clear_radius_for_roi_object_check() {
  radius_for_roi_object_check_ = 0;
  clear_has_radius_for_roi_object_check();
}
 double FusionComponentConfig::radius_for_roi_object_check() const {
  // @@protoc_insertion_point(field_get:perception.base.FusionComponentConfig.radius_for_roi_object_check)
  return radius_for_roi_object_check_;
}
 void FusionComponentConfig::set_radius_for_roi_object_check(double value) {
  set_has_radius_for_roi_object_check();
  radius_for_roi_object_check_ = value;
  // @@protoc_insertion_point(field_set:perception.base.FusionComponentConfig.radius_for_roi_object_check)
}

// optional string output_obstacles_channel_name = 5 [default = "/perception/vehicle/obstacles"];
bool FusionComponentConfig::has_output_obstacles_channel_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FusionComponentConfig::set_has_output_obstacles_channel_name() {
  _has_bits_[0] |= 0x00000010u;
}
void FusionComponentConfig::clear_has_output_obstacles_channel_name() {
  _has_bits_[0] &= ~0x00000010u;
}
void FusionComponentConfig::clear_output_obstacles_channel_name() {
  output_obstacles_channel_name_.ClearToDefaultNoArena(_default_output_obstacles_channel_name_);
  clear_has_output_obstacles_channel_name();
}
 const ::std::string& FusionComponentConfig::output_obstacles_channel_name() const {
  // @@protoc_insertion_point(field_get:perception.base.FusionComponentConfig.output_obstacles_channel_name)
  return output_obstacles_channel_name_.GetNoArena(_default_output_obstacles_channel_name_);
}
 void FusionComponentConfig::set_output_obstacles_channel_name(const ::std::string& value) {
  set_has_output_obstacles_channel_name();
  output_obstacles_channel_name_.SetNoArena(_default_output_obstacles_channel_name_, value);
  // @@protoc_insertion_point(field_set:perception.base.FusionComponentConfig.output_obstacles_channel_name)
}
 void FusionComponentConfig::set_output_obstacles_channel_name(const char* value) {
  set_has_output_obstacles_channel_name();
  output_obstacles_channel_name_.SetNoArena(_default_output_obstacles_channel_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.base.FusionComponentConfig.output_obstacles_channel_name)
}
 void FusionComponentConfig::set_output_obstacles_channel_name(const char* value, size_t size) {
  set_has_output_obstacles_channel_name();
  output_obstacles_channel_name_.SetNoArena(_default_output_obstacles_channel_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.base.FusionComponentConfig.output_obstacles_channel_name)
}
 ::std::string* FusionComponentConfig::mutable_output_obstacles_channel_name() {
  set_has_output_obstacles_channel_name();
  // @@protoc_insertion_point(field_mutable:perception.base.FusionComponentConfig.output_obstacles_channel_name)
  return output_obstacles_channel_name_.MutableNoArena(_default_output_obstacles_channel_name_);
}
 ::std::string* FusionComponentConfig::release_output_obstacles_channel_name() {
  // @@protoc_insertion_point(field_release:perception.base.FusionComponentConfig.output_obstacles_channel_name)
  clear_has_output_obstacles_channel_name();
  return output_obstacles_channel_name_.ReleaseNoArena(_default_output_obstacles_channel_name_);
}
 void FusionComponentConfig::set_allocated_output_obstacles_channel_name(::std::string* output_obstacles_channel_name) {
  if (output_obstacles_channel_name != NULL) {
    set_has_output_obstacles_channel_name();
  } else {
    clear_has_output_obstacles_channel_name();
  }
  output_obstacles_channel_name_.SetAllocatedNoArena(_default_output_obstacles_channel_name_, output_obstacles_channel_name);
  // @@protoc_insertion_point(field_set_allocated:perception.base.FusionComponentConfig.output_obstacles_channel_name)
}

// optional string output_viz_fused_content_channel_name = 6 [default = "/perception/inner/visualization/FusedObjects"];
bool FusionComponentConfig::has_output_viz_fused_content_channel_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FusionComponentConfig::set_has_output_viz_fused_content_channel_name() {
  _has_bits_[0] |= 0x00000020u;
}
void FusionComponentConfig::clear_has_output_viz_fused_content_channel_name() {
  _has_bits_[0] &= ~0x00000020u;
}
void FusionComponentConfig::clear_output_viz_fused_content_channel_name() {
  output_viz_fused_content_channel_name_.ClearToDefaultNoArena(_default_output_viz_fused_content_channel_name_);
  clear_has_output_viz_fused_content_channel_name();
}
 const ::std::string& FusionComponentConfig::output_viz_fused_content_channel_name() const {
  // @@protoc_insertion_point(field_get:perception.base.FusionComponentConfig.output_viz_fused_content_channel_name)
  return output_viz_fused_content_channel_name_.GetNoArena(_default_output_viz_fused_content_channel_name_);
}
 void FusionComponentConfig::set_output_viz_fused_content_channel_name(const ::std::string& value) {
  set_has_output_viz_fused_content_channel_name();
  output_viz_fused_content_channel_name_.SetNoArena(_default_output_viz_fused_content_channel_name_, value);
  // @@protoc_insertion_point(field_set:perception.base.FusionComponentConfig.output_viz_fused_content_channel_name)
}
 void FusionComponentConfig::set_output_viz_fused_content_channel_name(const char* value) {
  set_has_output_viz_fused_content_channel_name();
  output_viz_fused_content_channel_name_.SetNoArena(_default_output_viz_fused_content_channel_name_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.base.FusionComponentConfig.output_viz_fused_content_channel_name)
}
 void FusionComponentConfig::set_output_viz_fused_content_channel_name(const char* value, size_t size) {
  set_has_output_viz_fused_content_channel_name();
  output_viz_fused_content_channel_name_.SetNoArena(_default_output_viz_fused_content_channel_name_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.base.FusionComponentConfig.output_viz_fused_content_channel_name)
}
 ::std::string* FusionComponentConfig::mutable_output_viz_fused_content_channel_name() {
  set_has_output_viz_fused_content_channel_name();
  // @@protoc_insertion_point(field_mutable:perception.base.FusionComponentConfig.output_viz_fused_content_channel_name)
  return output_viz_fused_content_channel_name_.MutableNoArena(_default_output_viz_fused_content_channel_name_);
}
 ::std::string* FusionComponentConfig::release_output_viz_fused_content_channel_name() {
  // @@protoc_insertion_point(field_release:perception.base.FusionComponentConfig.output_viz_fused_content_channel_name)
  clear_has_output_viz_fused_content_channel_name();
  return output_viz_fused_content_channel_name_.ReleaseNoArena(_default_output_viz_fused_content_channel_name_);
}
 void FusionComponentConfig::set_allocated_output_viz_fused_content_channel_name(::std::string* output_viz_fused_content_channel_name) {
  if (output_viz_fused_content_channel_name != NULL) {
    set_has_output_viz_fused_content_channel_name();
  } else {
    clear_has_output_viz_fused_content_channel_name();
  }
  output_viz_fused_content_channel_name_.SetAllocatedNoArena(_default_output_viz_fused_content_channel_name_, output_viz_fused_content_channel_name);
  // @@protoc_insertion_point(field_set_allocated:perception.base.FusionComponentConfig.output_viz_fused_content_channel_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace base
}  // namespace perception

// @@protoc_insertion_point(global_scope)
