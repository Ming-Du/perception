// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perception_component.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "perception_component.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace perception {

namespace {

const ::google::protobuf::Descriptor* Vector3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3_reflection_ = NULL;
const ::google::protobuf::Descriptor* Roi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Roi_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputSensor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputSensor_reflection_ = NULL;
const ::google::protobuf::Descriptor* LidarComponentInitOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LidarComponentInitOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraComponentInitOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraComponentInitOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* VirtualObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VirtualObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* FusionComponentInitOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FusionComponentInitOptions_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_perception_5fcomponent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_perception_5fcomponent_2eproto() {
  protobuf_AddDesc_perception_5fcomponent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "perception_component.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3_descriptor_ = file->message_type(0);
  static const int Vector3_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, z_),
  };
  Vector3_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector3_descriptor_,
      Vector3::default_instance_,
      Vector3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _has_bits_[0]),
      -1,
      -1,
      sizeof(Vector3),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3, _internal_metadata_),
      -1);
  Roi_descriptor_ = file->message_type(1);
  static const int Roi_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roi, roi_x_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roi, roi_x_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roi, roi_y_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roi, roi_y_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roi, roi_z_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roi, roi_z_max_),
  };
  Roi_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Roi_descriptor_,
      Roi::default_instance_,
      Roi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roi, _has_bits_[0]),
      -1,
      -1,
      sizeof(Roi),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Roi, _internal_metadata_),
      -1);
  InputSensor_descriptor_ = file->message_type(2);
  static const int InputSensor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputSensor, sensor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputSensor, topic_),
  };
  InputSensor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      InputSensor_descriptor_,
      InputSensor::default_instance_,
      InputSensor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputSensor, _has_bits_[0]),
      -1,
      -1,
      sizeof(InputSensor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputSensor, _internal_metadata_),
      -1);
  LidarComponentInitOptions_descriptor_ = file->message_type(3);
  static const int LidarComponentInitOptions_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarComponentInitOptions, input_sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarComponentInitOptions, roi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarComponentInitOptions, sensor_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarComponentInitOptions, downsampling_radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarComponentInitOptions, num_lpr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarComponentInitOptions, th_dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarComponentInitOptions, th_seeds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarComponentInitOptions, min_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarComponentInitOptions, publish_cluster_),
  };
  LidarComponentInitOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LidarComponentInitOptions_descriptor_,
      LidarComponentInitOptions::default_instance_,
      LidarComponentInitOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarComponentInitOptions, _has_bits_[0]),
      -1,
      -1,
      sizeof(LidarComponentInitOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LidarComponentInitOptions, _internal_metadata_),
      -1);
  CameraComponentInitOptions_descriptor_ = file->message_type(4);
  static const int CameraComponentInitOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraComponentInitOptions, input_sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraComponentInitOptions, load_serialize_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraComponentInitOptions, load_class_names_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraComponentInitOptions, publish_objects_),
  };
  CameraComponentInitOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CameraComponentInitOptions_descriptor_,
      CameraComponentInitOptions::default_instance_,
      CameraComponentInitOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraComponentInitOptions, _has_bits_[0]),
      -1,
      -1,
      sizeof(CameraComponentInitOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraComponentInitOptions, _internal_metadata_),
      -1);
  VirtualObject_descriptor_ = file->message_type(5);
  static const int VirtualObject_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualObject, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualObject, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualObject, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualObject, yaw_),
  };
  VirtualObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VirtualObject_descriptor_,
      VirtualObject::default_instance_,
      VirtualObject_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualObject, _has_bits_[0]),
      -1,
      -1,
      sizeof(VirtualObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VirtualObject, _internal_metadata_),
      -1);
  FusionComponentInitOptions_descriptor_ = file->message_type(6);
  static const int FusionComponentInitOptions_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, use_lidar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, use_radar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, use_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, input_sensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, fusion_method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, fusion_main_sensors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, object_in_roi_check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, radius_for_roi_object_check_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, localization_topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, output_obstacles_topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, output_obstacles_topic_name_app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, output_viz_fused_box_topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, output_viz_fused_text_topic_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, enable_publish_fusion_topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, enable_publish_fusion_topic_app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, use_obu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, use_vidar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, pub_vidar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, pub_radar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, pub_obu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, use_falcon_lidar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, falcon_lidar_filter_distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, virtual_object_),
  };
  FusionComponentInitOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FusionComponentInitOptions_descriptor_,
      FusionComponentInitOptions::default_instance_,
      FusionComponentInitOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, _has_bits_[0]),
      -1,
      -1,
      sizeof(FusionComponentInitOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FusionComponentInitOptions, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_perception_5fcomponent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector3_descriptor_, &Vector3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Roi_descriptor_, &Roi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      InputSensor_descriptor_, &InputSensor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LidarComponentInitOptions_descriptor_, &LidarComponentInitOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CameraComponentInitOptions_descriptor_, &CameraComponentInitOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VirtualObject_descriptor_, &VirtualObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FusionComponentInitOptions_descriptor_, &FusionComponentInitOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_perception_5fcomponent_2eproto() {
  delete Vector3::default_instance_;
  delete Vector3_reflection_;
  delete Roi::default_instance_;
  delete Roi_reflection_;
  delete InputSensor::default_instance_;
  delete InputSensor_reflection_;
  delete LidarComponentInitOptions::default_instance_;
  delete LidarComponentInitOptions_reflection_;
  delete CameraComponentInitOptions::default_instance_;
  delete CameraComponentInitOptions_reflection_;
  delete VirtualObject::default_instance_;
  delete VirtualObject_reflection_;
  delete FusionComponentInitOptions::default_instance_;
  delete FusionComponentInitOptions_reflection_;
}

void protobuf_AddDesc_perception_5fcomponent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_perception_5fcomponent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032perception_component.proto\022\nperception"
    "\"*\n\007Vector3\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003"
    " \001(\001\"w\n\003Roi\022\021\n\troi_x_min\030\001 \001(\002\022\021\n\troi_x_"
    "max\030\002 \001(\002\022\021\n\troi_y_min\030\003 \001(\002\022\021\n\troi_y_ma"
    "x\030\004 \001(\002\022\021\n\troi_z_min\030\005 \001(\002\022\021\n\troi_z_max\030"
    "\006 \001(\002\"1\n\013InputSensor\022\023\n\013sensor_name\030\001 \001("
    "\t\022\r\n\005topic\030\002 \001(\t\"\363\001\n\031LidarComponentInitO"
    "ptions\022\024\n\014input_sensor\030\001 \001(\t\022\034\n\003roi\030\002 \001("
    "\0132\017.perception.Roi\022\025\n\rsensor_height\030\004 \001("
    "\002\022!\n\023downsampling_radius\030\005 \001(\002:\0040.06\022\017\n\007"
    "num_lpr\030\006 \001(\005\022\017\n\007th_dist\030\007 \001(\002\022\020\n\010th_see"
    "ds\030\010 \001(\002\022\024\n\014min_distance\030\t \001(\002\022\036\n\017publis"
    "h_cluster\030\n \001(\010:\005false\"\212\001\n\032CameraCompone"
    "ntInitOptions\022\024\n\014input_sensor\030\001 \001(\t\022\037\n\023l"
    "oad_serialize_path\030\002 \001(\tB\002\030\001\022\034\n\020load_cla"
    "ss_names\030\003 \001(\tB\002\030\001\022\027\n\017publish_objects\030\006 "
    "\001(\t\"r\n\rVirtualObject\022\n\n\002id\030\001 \001(\r\022%\n\010posi"
    "tion\030\002 \001(\0132\023.perception.Vector3\022!\n\004size\030"
    "\003 \001(\0132\023.perception.Vector3\022\013\n\003yaw\030\004 \001(\001\""
    "\233\006\n\032FusionComponentInitOptions\022\027\n\tuse_li"
    "dar\030\001 \001(\010:\004true\022\030\n\tuse_radar\030\002 \001(\010:\005fals"
    "e\022\030\n\nuse_camera\030\003 \001(\010:\004true\022-\n\014input_sen"
    "sor\030\004 \003(\0132\027.perception.InputSensor\022\025\n\rfu"
    "sion_method\030\005 \001(\t\022\033\n\023fusion_main_sensors"
    "\030\006 \003(\t\022\033\n\023object_in_roi_check\030\007 \001(\010\022#\n\033r"
    "adius_for_roi_object_check\030\010 \001(\001\022\032\n\022loca"
    "lization_topic\030\t \001(\t\022#\n\033output_obstacles"
    "_topic_name\030\n \001(\t\022\'\n\037output_obstacles_to"
    "pic_name_app\030\013 \001(\t\022\'\n\037output_viz_fused_b"
    "ox_topic_name\030\014 \001(\t\022(\n output_viz_fused_"
    "text_topic_name\030\r \001(\t\022)\n\033enable_publish_"
    "fusion_topic\030\016 \001(\010:\004true\022-\n\037enable_publi"
    "sh_fusion_topic_app\030\017 \001(\010:\004true\022\025\n\007use_o"
    "bu\030\020 \001(\010:\004true\022\030\n\tuse_vidar\030\021 \001(\010:\005false"
    "\022\030\n\tpub_vidar\030\022 \001(\010:\005false\022\030\n\tpub_radar\030"
    "\023 \001(\010:\005false\022\026\n\007pub_obu\030\024 \001(\010:\005false\022\036\n\020"
    "use_falcon_lidar\030\025 \001(\010:\004true\022$\n\034falcon_l"
    "idar_filter_distance\030\026 \001(\001\0221\n\016virtual_ob"
    "ject\030\027 \003(\0132\031.perception.VirtualObject", 1557);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "perception_component.proto", &protobuf_RegisterTypes);
  Vector3::default_instance_ = new Vector3();
  Roi::default_instance_ = new Roi();
  InputSensor::default_instance_ = new InputSensor();
  LidarComponentInitOptions::default_instance_ = new LidarComponentInitOptions();
  CameraComponentInitOptions::default_instance_ = new CameraComponentInitOptions();
  VirtualObject::default_instance_ = new VirtualObject();
  FusionComponentInitOptions::default_instance_ = new FusionComponentInitOptions();
  Vector3::default_instance_->InitAsDefaultInstance();
  Roi::default_instance_->InitAsDefaultInstance();
  InputSensor::default_instance_->InitAsDefaultInstance();
  LidarComponentInitOptions::default_instance_->InitAsDefaultInstance();
  CameraComponentInitOptions::default_instance_->InitAsDefaultInstance();
  VirtualObject::default_instance_->InitAsDefaultInstance();
  FusionComponentInitOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_perception_5fcomponent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_perception_5fcomponent_2eproto {
  StaticDescriptorInitializer_perception_5fcomponent_2eproto() {
    protobuf_AddDesc_perception_5fcomponent_2eproto();
  }
} static_descriptor_initializer_perception_5fcomponent_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3::Vector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.Vector3)
}

void Vector3::InitAsDefaultInstance() {
}

Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.Vector3)
}

void Vector3::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:perception.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3_descriptor_;
}

const Vector3& Vector3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_5fcomponent_2eproto();
  return *default_instance_;
}

Vector3* Vector3::default_instance_ = NULL;

Vector3* Vector3::New(::google::protobuf::Arena* arena) const {
  Vector3* n = new Vector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Vector3)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Vector3, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector3*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // optional double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }

      // optional double z = 3;
      case 3: {
        if (tag == 25) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.Vector3)
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.Vector3)
}

::google::protobuf::uint8* Vector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Vector3)
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Vector3)
  return target;
}

int Vector3::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Vector3)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Vector3)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Vector3* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Vector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Vector3)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {

  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3::InternalSwap(Vector3* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3_descriptor_;
  metadata.reflection = Vector3_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector3

// optional double x = 1;
bool Vector3::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector3::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector3::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector3::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double Vector3::x() const {
  // @@protoc_insertion_point(field_get:perception.Vector3.x)
  return x_;
}
 void Vector3::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:perception.Vector3.x)
}

// optional double y = 2;
bool Vector3::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector3::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector3::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector3::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double Vector3::y() const {
  // @@protoc_insertion_point(field_get:perception.Vector3.y)
  return y_;
}
 void Vector3::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:perception.Vector3.y)
}

// optional double z = 3;
bool Vector3::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector3::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector3::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector3::clear_z() {
  z_ = 0;
  clear_has_z();
}
 double Vector3::z() const {
  // @@protoc_insertion_point(field_get:perception.Vector3.z)
  return z_;
}
 void Vector3::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:perception.Vector3.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Roi::kRoiXMinFieldNumber;
const int Roi::kRoiXMaxFieldNumber;
const int Roi::kRoiYMinFieldNumber;
const int Roi::kRoiYMaxFieldNumber;
const int Roi::kRoiZMinFieldNumber;
const int Roi::kRoiZMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Roi::Roi()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.Roi)
}

void Roi::InitAsDefaultInstance() {
}

Roi::Roi(const Roi& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.Roi)
}

void Roi::SharedCtor() {
  _cached_size_ = 0;
  roi_x_min_ = 0;
  roi_x_max_ = 0;
  roi_y_min_ = 0;
  roi_y_max_ = 0;
  roi_z_min_ = 0;
  roi_z_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Roi::~Roi() {
  // @@protoc_insertion_point(destructor:perception.Roi)
  SharedDtor();
}

void Roi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Roi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Roi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Roi_descriptor_;
}

const Roi& Roi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_5fcomponent_2eproto();
  return *default_instance_;
}

Roi* Roi::default_instance_ = NULL;

Roi* Roi::New(::google::protobuf::Arena* arena) const {
  Roi* n = new Roi;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Roi::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.Roi)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Roi, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Roi*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(roi_x_min_, roi_z_max_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Roi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.Roi)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float roi_x_min = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roi_x_min_)));
          set_has_roi_x_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_roi_x_max;
        break;
      }

      // optional float roi_x_max = 2;
      case 2: {
        if (tag == 21) {
         parse_roi_x_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roi_x_max_)));
          set_has_roi_x_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_roi_y_min;
        break;
      }

      // optional float roi_y_min = 3;
      case 3: {
        if (tag == 29) {
         parse_roi_y_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roi_y_min_)));
          set_has_roi_y_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_roi_y_max;
        break;
      }

      // optional float roi_y_max = 4;
      case 4: {
        if (tag == 37) {
         parse_roi_y_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roi_y_max_)));
          set_has_roi_y_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_roi_z_min;
        break;
      }

      // optional float roi_z_min = 5;
      case 5: {
        if (tag == 45) {
         parse_roi_z_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roi_z_min_)));
          set_has_roi_z_min();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_roi_z_max;
        break;
      }

      // optional float roi_z_max = 6;
      case 6: {
        if (tag == 53) {
         parse_roi_z_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roi_z_max_)));
          set_has_roi_z_max();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.Roi)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.Roi)
  return false;
#undef DO_
}

void Roi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.Roi)
  // optional float roi_x_min = 1;
  if (has_roi_x_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->roi_x_min(), output);
  }

  // optional float roi_x_max = 2;
  if (has_roi_x_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->roi_x_max(), output);
  }

  // optional float roi_y_min = 3;
  if (has_roi_y_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->roi_y_min(), output);
  }

  // optional float roi_y_max = 4;
  if (has_roi_y_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->roi_y_max(), output);
  }

  // optional float roi_z_min = 5;
  if (has_roi_z_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->roi_z_min(), output);
  }

  // optional float roi_z_max = 6;
  if (has_roi_z_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->roi_z_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.Roi)
}

::google::protobuf::uint8* Roi::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.Roi)
  // optional float roi_x_min = 1;
  if (has_roi_x_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->roi_x_min(), target);
  }

  // optional float roi_x_max = 2;
  if (has_roi_x_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->roi_x_max(), target);
  }

  // optional float roi_y_min = 3;
  if (has_roi_y_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->roi_y_min(), target);
  }

  // optional float roi_y_max = 4;
  if (has_roi_y_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->roi_y_max(), target);
  }

  // optional float roi_z_min = 5;
  if (has_roi_z_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->roi_z_min(), target);
  }

  // optional float roi_z_max = 6;
  if (has_roi_z_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->roi_z_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.Roi)
  return target;
}

int Roi::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perception.Roi)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional float roi_x_min = 1;
    if (has_roi_x_min()) {
      total_size += 1 + 4;
    }

    // optional float roi_x_max = 2;
    if (has_roi_x_max()) {
      total_size += 1 + 4;
    }

    // optional float roi_y_min = 3;
    if (has_roi_y_min()) {
      total_size += 1 + 4;
    }

    // optional float roi_y_max = 4;
    if (has_roi_y_max()) {
      total_size += 1 + 4;
    }

    // optional float roi_z_min = 5;
    if (has_roi_z_min()) {
      total_size += 1 + 4;
    }

    // optional float roi_z_max = 6;
    if (has_roi_z_max()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Roi::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.Roi)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Roi* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Roi>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.Roi)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.Roi)
    MergeFrom(*source);
  }
}

void Roi::MergeFrom(const Roi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.Roi)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roi_x_min()) {
      set_roi_x_min(from.roi_x_min());
    }
    if (from.has_roi_x_max()) {
      set_roi_x_max(from.roi_x_max());
    }
    if (from.has_roi_y_min()) {
      set_roi_y_min(from.roi_y_min());
    }
    if (from.has_roi_y_max()) {
      set_roi_y_max(from.roi_y_max());
    }
    if (from.has_roi_z_min()) {
      set_roi_z_min(from.roi_z_min());
    }
    if (from.has_roi_z_max()) {
      set_roi_z_max(from.roi_z_max());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Roi::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.Roi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Roi::CopyFrom(const Roi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.Roi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Roi::IsInitialized() const {

  return true;
}

void Roi::Swap(Roi* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Roi::InternalSwap(Roi* other) {
  std::swap(roi_x_min_, other->roi_x_min_);
  std::swap(roi_x_max_, other->roi_x_max_);
  std::swap(roi_y_min_, other->roi_y_min_);
  std::swap(roi_y_max_, other->roi_y_max_);
  std::swap(roi_z_min_, other->roi_z_min_);
  std::swap(roi_z_max_, other->roi_z_max_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Roi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Roi_descriptor_;
  metadata.reflection = Roi_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Roi

// optional float roi_x_min = 1;
bool Roi::has_roi_x_min() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Roi::set_has_roi_x_min() {
  _has_bits_[0] |= 0x00000001u;
}
void Roi::clear_has_roi_x_min() {
  _has_bits_[0] &= ~0x00000001u;
}
void Roi::clear_roi_x_min() {
  roi_x_min_ = 0;
  clear_has_roi_x_min();
}
 float Roi::roi_x_min() const {
  // @@protoc_insertion_point(field_get:perception.Roi.roi_x_min)
  return roi_x_min_;
}
 void Roi::set_roi_x_min(float value) {
  set_has_roi_x_min();
  roi_x_min_ = value;
  // @@protoc_insertion_point(field_set:perception.Roi.roi_x_min)
}

// optional float roi_x_max = 2;
bool Roi::has_roi_x_max() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Roi::set_has_roi_x_max() {
  _has_bits_[0] |= 0x00000002u;
}
void Roi::clear_has_roi_x_max() {
  _has_bits_[0] &= ~0x00000002u;
}
void Roi::clear_roi_x_max() {
  roi_x_max_ = 0;
  clear_has_roi_x_max();
}
 float Roi::roi_x_max() const {
  // @@protoc_insertion_point(field_get:perception.Roi.roi_x_max)
  return roi_x_max_;
}
 void Roi::set_roi_x_max(float value) {
  set_has_roi_x_max();
  roi_x_max_ = value;
  // @@protoc_insertion_point(field_set:perception.Roi.roi_x_max)
}

// optional float roi_y_min = 3;
bool Roi::has_roi_y_min() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Roi::set_has_roi_y_min() {
  _has_bits_[0] |= 0x00000004u;
}
void Roi::clear_has_roi_y_min() {
  _has_bits_[0] &= ~0x00000004u;
}
void Roi::clear_roi_y_min() {
  roi_y_min_ = 0;
  clear_has_roi_y_min();
}
 float Roi::roi_y_min() const {
  // @@protoc_insertion_point(field_get:perception.Roi.roi_y_min)
  return roi_y_min_;
}
 void Roi::set_roi_y_min(float value) {
  set_has_roi_y_min();
  roi_y_min_ = value;
  // @@protoc_insertion_point(field_set:perception.Roi.roi_y_min)
}

// optional float roi_y_max = 4;
bool Roi::has_roi_y_max() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Roi::set_has_roi_y_max() {
  _has_bits_[0] |= 0x00000008u;
}
void Roi::clear_has_roi_y_max() {
  _has_bits_[0] &= ~0x00000008u;
}
void Roi::clear_roi_y_max() {
  roi_y_max_ = 0;
  clear_has_roi_y_max();
}
 float Roi::roi_y_max() const {
  // @@protoc_insertion_point(field_get:perception.Roi.roi_y_max)
  return roi_y_max_;
}
 void Roi::set_roi_y_max(float value) {
  set_has_roi_y_max();
  roi_y_max_ = value;
  // @@protoc_insertion_point(field_set:perception.Roi.roi_y_max)
}

// optional float roi_z_min = 5;
bool Roi::has_roi_z_min() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Roi::set_has_roi_z_min() {
  _has_bits_[0] |= 0x00000010u;
}
void Roi::clear_has_roi_z_min() {
  _has_bits_[0] &= ~0x00000010u;
}
void Roi::clear_roi_z_min() {
  roi_z_min_ = 0;
  clear_has_roi_z_min();
}
 float Roi::roi_z_min() const {
  // @@protoc_insertion_point(field_get:perception.Roi.roi_z_min)
  return roi_z_min_;
}
 void Roi::set_roi_z_min(float value) {
  set_has_roi_z_min();
  roi_z_min_ = value;
  // @@protoc_insertion_point(field_set:perception.Roi.roi_z_min)
}

// optional float roi_z_max = 6;
bool Roi::has_roi_z_max() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Roi::set_has_roi_z_max() {
  _has_bits_[0] |= 0x00000020u;
}
void Roi::clear_has_roi_z_max() {
  _has_bits_[0] &= ~0x00000020u;
}
void Roi::clear_roi_z_max() {
  roi_z_max_ = 0;
  clear_has_roi_z_max();
}
 float Roi::roi_z_max() const {
  // @@protoc_insertion_point(field_get:perception.Roi.roi_z_max)
  return roi_z_max_;
}
 void Roi::set_roi_z_max(float value) {
  set_has_roi_z_max();
  roi_z_max_ = value;
  // @@protoc_insertion_point(field_set:perception.Roi.roi_z_max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int InputSensor::kSensorNameFieldNumber;
const int InputSensor::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

InputSensor::InputSensor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.InputSensor)
}

void InputSensor::InitAsDefaultInstance() {
}

InputSensor::InputSensor(const InputSensor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.InputSensor)
}

void InputSensor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sensor_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InputSensor::~InputSensor() {
  // @@protoc_insertion_point(destructor:perception.InputSensor)
  SharedDtor();
}

void InputSensor::SharedDtor() {
  sensor_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void InputSensor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputSensor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputSensor_descriptor_;
}

const InputSensor& InputSensor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_5fcomponent_2eproto();
  return *default_instance_;
}

InputSensor* InputSensor::default_instance_ = NULL;

InputSensor* InputSensor::New(::google::protobuf::Arena* arena) const {
  InputSensor* n = new InputSensor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void InputSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.InputSensor)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_sensor_name()) {
      sensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_topic()) {
      topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool InputSensor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.InputSensor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sensor_name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sensor_name().data(), this->sensor_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.InputSensor.sensor_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic;
        break;
      }

      // optional string topic = 2;
      case 2: {
        if (tag == 18) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.InputSensor.topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.InputSensor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.InputSensor)
  return false;
#undef DO_
}

void InputSensor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.InputSensor)
  // optional string sensor_name = 1;
  if (has_sensor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_name().data(), this->sensor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.InputSensor.sensor_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sensor_name(), output);
  }

  // optional string topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.InputSensor.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.InputSensor)
}

::google::protobuf::uint8* InputSensor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.InputSensor)
  // optional string sensor_name = 1;
  if (has_sensor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_name().data(), this->sensor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.InputSensor.sensor_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sensor_name(), target);
  }

  // optional string topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.InputSensor.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.InputSensor)
  return target;
}

int InputSensor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perception.InputSensor)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string sensor_name = 1;
    if (has_sensor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sensor_name());
    }

    // optional string topic = 2;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputSensor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.InputSensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const InputSensor* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const InputSensor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.InputSensor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.InputSensor)
    MergeFrom(*source);
  }
}

void InputSensor::MergeFrom(const InputSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.InputSensor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sensor_name()) {
      set_has_sensor_name();
      sensor_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_name_);
    }
    if (from.has_topic()) {
      set_has_topic();
      topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void InputSensor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.InputSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputSensor::CopyFrom(const InputSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.InputSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputSensor::IsInitialized() const {

  return true;
}

void InputSensor::Swap(InputSensor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void InputSensor::InternalSwap(InputSensor* other) {
  sensor_name_.Swap(&other->sensor_name_);
  topic_.Swap(&other->topic_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata InputSensor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputSensor_descriptor_;
  metadata.reflection = InputSensor_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// InputSensor

// optional string sensor_name = 1;
bool InputSensor::has_sensor_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void InputSensor::set_has_sensor_name() {
  _has_bits_[0] |= 0x00000001u;
}
void InputSensor::clear_has_sensor_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void InputSensor::clear_sensor_name() {
  sensor_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sensor_name();
}
 const ::std::string& InputSensor::sensor_name() const {
  // @@protoc_insertion_point(field_get:perception.InputSensor.sensor_name)
  return sensor_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InputSensor::set_sensor_name(const ::std::string& value) {
  set_has_sensor_name();
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.InputSensor.sensor_name)
}
 void InputSensor::set_sensor_name(const char* value) {
  set_has_sensor_name();
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.InputSensor.sensor_name)
}
 void InputSensor::set_sensor_name(const char* value, size_t size) {
  set_has_sensor_name();
  sensor_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.InputSensor.sensor_name)
}
 ::std::string* InputSensor::mutable_sensor_name() {
  set_has_sensor_name();
  // @@protoc_insertion_point(field_mutable:perception.InputSensor.sensor_name)
  return sensor_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InputSensor::release_sensor_name() {
  // @@protoc_insertion_point(field_release:perception.InputSensor.sensor_name)
  clear_has_sensor_name();
  return sensor_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InputSensor::set_allocated_sensor_name(::std::string* sensor_name) {
  if (sensor_name != NULL) {
    set_has_sensor_name();
  } else {
    clear_has_sensor_name();
  }
  sensor_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_name);
  // @@protoc_insertion_point(field_set_allocated:perception.InputSensor.sensor_name)
}

// optional string topic = 2;
bool InputSensor::has_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void InputSensor::set_has_topic() {
  _has_bits_[0] |= 0x00000002u;
}
void InputSensor::clear_has_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
void InputSensor::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
 const ::std::string& InputSensor::topic() const {
  // @@protoc_insertion_point(field_get:perception.InputSensor.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InputSensor::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.InputSensor.topic)
}
 void InputSensor::set_topic(const char* value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.InputSensor.topic)
}
 void InputSensor::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.InputSensor.topic)
}
 ::std::string* InputSensor::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:perception.InputSensor.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* InputSensor::release_topic() {
  // @@protoc_insertion_point(field_release:perception.InputSensor.topic)
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void InputSensor::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:perception.InputSensor.topic)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LidarComponentInitOptions::kInputSensorFieldNumber;
const int LidarComponentInitOptions::kRoiFieldNumber;
const int LidarComponentInitOptions::kSensorHeightFieldNumber;
const int LidarComponentInitOptions::kDownsamplingRadiusFieldNumber;
const int LidarComponentInitOptions::kNumLprFieldNumber;
const int LidarComponentInitOptions::kThDistFieldNumber;
const int LidarComponentInitOptions::kThSeedsFieldNumber;
const int LidarComponentInitOptions::kMinDistanceFieldNumber;
const int LidarComponentInitOptions::kPublishClusterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LidarComponentInitOptions::LidarComponentInitOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.LidarComponentInitOptions)
}

void LidarComponentInitOptions::InitAsDefaultInstance() {
  roi_ = const_cast< ::perception::Roi*>(&::perception::Roi::default_instance());
}

LidarComponentInitOptions::LidarComponentInitOptions(const LidarComponentInitOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.LidarComponentInitOptions)
}

void LidarComponentInitOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  input_sensor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  roi_ = NULL;
  sensor_height_ = 0;
  downsampling_radius_ = 0.06f;
  num_lpr_ = 0;
  th_dist_ = 0;
  th_seeds_ = 0;
  min_distance_ = 0;
  publish_cluster_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LidarComponentInitOptions::~LidarComponentInitOptions() {
  // @@protoc_insertion_point(destructor:perception.LidarComponentInitOptions)
  SharedDtor();
}

void LidarComponentInitOptions::SharedDtor() {
  input_sensor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete roi_;
  }
}

void LidarComponentInitOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LidarComponentInitOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LidarComponentInitOptions_descriptor_;
}

const LidarComponentInitOptions& LidarComponentInitOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_5fcomponent_2eproto();
  return *default_instance_;
}

LidarComponentInitOptions* LidarComponentInitOptions::default_instance_ = NULL;

LidarComponentInitOptions* LidarComponentInitOptions::New(::google::protobuf::Arena* arena) const {
  LidarComponentInitOptions* n = new LidarComponentInitOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LidarComponentInitOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.LidarComponentInitOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LidarComponentInitOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LidarComponentInitOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(num_lpr_, min_distance_);
    if (has_input_sensor()) {
      input_sensor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_roi()) {
      if (roi_ != NULL) roi_->::perception::Roi::Clear();
    }
    sensor_height_ = 0;
    downsampling_radius_ = 0.06f;
  }
  publish_cluster_ = false;

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool LidarComponentInitOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.LidarComponentInitOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string input_sensor = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_sensor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_sensor().data(), this->input_sensor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.LidarComponentInitOptions.input_sensor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_roi;
        break;
      }

      // optional .perception.Roi roi = 2;
      case 2: {
        if (tag == 18) {
         parse_roi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_sensor_height;
        break;
      }

      // optional float sensor_height = 4;
      case 4: {
        if (tag == 37) {
         parse_sensor_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sensor_height_)));
          set_has_sensor_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_downsampling_radius;
        break;
      }

      // optional float downsampling_radius = 5 [default = 0.06];
      case 5: {
        if (tag == 45) {
         parse_downsampling_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &downsampling_radius_)));
          set_has_downsampling_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_lpr;
        break;
      }

      // optional int32 num_lpr = 6;
      case 6: {
        if (tag == 48) {
         parse_num_lpr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_lpr_)));
          set_has_num_lpr();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_th_dist;
        break;
      }

      // optional float th_dist = 7;
      case 7: {
        if (tag == 61) {
         parse_th_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &th_dist_)));
          set_has_th_dist();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_th_seeds;
        break;
      }

      // optional float th_seeds = 8;
      case 8: {
        if (tag == 69) {
         parse_th_seeds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &th_seeds_)));
          set_has_th_seeds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_min_distance;
        break;
      }

      // optional float min_distance = 9;
      case 9: {
        if (tag == 77) {
         parse_min_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_distance_)));
          set_has_min_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_publish_cluster;
        break;
      }

      // optional bool publish_cluster = 10 [default = false];
      case 10: {
        if (tag == 80) {
         parse_publish_cluster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &publish_cluster_)));
          set_has_publish_cluster();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.LidarComponentInitOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.LidarComponentInitOptions)
  return false;
#undef DO_
}

void LidarComponentInitOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.LidarComponentInitOptions)
  // optional string input_sensor = 1;
  if (has_input_sensor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_sensor().data(), this->input_sensor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.LidarComponentInitOptions.input_sensor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input_sensor(), output);
  }

  // optional .perception.Roi roi = 2;
  if (has_roi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->roi_, output);
  }

  // optional float sensor_height = 4;
  if (has_sensor_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sensor_height(), output);
  }

  // optional float downsampling_radius = 5 [default = 0.06];
  if (has_downsampling_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->downsampling_radius(), output);
  }

  // optional int32 num_lpr = 6;
  if (has_num_lpr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num_lpr(), output);
  }

  // optional float th_dist = 7;
  if (has_th_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->th_dist(), output);
  }

  // optional float th_seeds = 8;
  if (has_th_seeds()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->th_seeds(), output);
  }

  // optional float min_distance = 9;
  if (has_min_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->min_distance(), output);
  }

  // optional bool publish_cluster = 10 [default = false];
  if (has_publish_cluster()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->publish_cluster(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.LidarComponentInitOptions)
}

::google::protobuf::uint8* LidarComponentInitOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.LidarComponentInitOptions)
  // optional string input_sensor = 1;
  if (has_input_sensor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_sensor().data(), this->input_sensor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.LidarComponentInitOptions.input_sensor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->input_sensor(), target);
  }

  // optional .perception.Roi roi = 2;
  if (has_roi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->roi_, false, target);
  }

  // optional float sensor_height = 4;
  if (has_sensor_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sensor_height(), target);
  }

  // optional float downsampling_radius = 5 [default = 0.06];
  if (has_downsampling_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->downsampling_radius(), target);
  }

  // optional int32 num_lpr = 6;
  if (has_num_lpr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num_lpr(), target);
  }

  // optional float th_dist = 7;
  if (has_th_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->th_dist(), target);
  }

  // optional float th_seeds = 8;
  if (has_th_seeds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->th_seeds(), target);
  }

  // optional float min_distance = 9;
  if (has_min_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->min_distance(), target);
  }

  // optional bool publish_cluster = 10 [default = false];
  if (has_publish_cluster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->publish_cluster(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.LidarComponentInitOptions)
  return target;
}

int LidarComponentInitOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perception.LidarComponentInitOptions)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string input_sensor = 1;
    if (has_input_sensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_sensor());
    }

    // optional .perception.Roi roi = 2;
    if (has_roi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->roi_);
    }

    // optional float sensor_height = 4;
    if (has_sensor_height()) {
      total_size += 1 + 4;
    }

    // optional float downsampling_radius = 5 [default = 0.06];
    if (has_downsampling_radius()) {
      total_size += 1 + 4;
    }

    // optional int32 num_lpr = 6;
    if (has_num_lpr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_lpr());
    }

    // optional float th_dist = 7;
    if (has_th_dist()) {
      total_size += 1 + 4;
    }

    // optional float th_seeds = 8;
    if (has_th_seeds()) {
      total_size += 1 + 4;
    }

    // optional float min_distance = 9;
    if (has_min_distance()) {
      total_size += 1 + 4;
    }

  }
  // optional bool publish_cluster = 10 [default = false];
  if (has_publish_cluster()) {
    total_size += 1 + 1;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LidarComponentInitOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.LidarComponentInitOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const LidarComponentInitOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const LidarComponentInitOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.LidarComponentInitOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.LidarComponentInitOptions)
    MergeFrom(*source);
  }
}

void LidarComponentInitOptions::MergeFrom(const LidarComponentInitOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.LidarComponentInitOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input_sensor()) {
      set_has_input_sensor();
      input_sensor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_sensor_);
    }
    if (from.has_roi()) {
      mutable_roi()->::perception::Roi::MergeFrom(from.roi());
    }
    if (from.has_sensor_height()) {
      set_sensor_height(from.sensor_height());
    }
    if (from.has_downsampling_radius()) {
      set_downsampling_radius(from.downsampling_radius());
    }
    if (from.has_num_lpr()) {
      set_num_lpr(from.num_lpr());
    }
    if (from.has_th_dist()) {
      set_th_dist(from.th_dist());
    }
    if (from.has_th_seeds()) {
      set_th_seeds(from.th_seeds());
    }
    if (from.has_min_distance()) {
      set_min_distance(from.min_distance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_publish_cluster()) {
      set_publish_cluster(from.publish_cluster());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void LidarComponentInitOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.LidarComponentInitOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarComponentInitOptions::CopyFrom(const LidarComponentInitOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.LidarComponentInitOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarComponentInitOptions::IsInitialized() const {

  return true;
}

void LidarComponentInitOptions::Swap(LidarComponentInitOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LidarComponentInitOptions::InternalSwap(LidarComponentInitOptions* other) {
  input_sensor_.Swap(&other->input_sensor_);
  std::swap(roi_, other->roi_);
  std::swap(sensor_height_, other->sensor_height_);
  std::swap(downsampling_radius_, other->downsampling_radius_);
  std::swap(num_lpr_, other->num_lpr_);
  std::swap(th_dist_, other->th_dist_);
  std::swap(th_seeds_, other->th_seeds_);
  std::swap(min_distance_, other->min_distance_);
  std::swap(publish_cluster_, other->publish_cluster_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LidarComponentInitOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LidarComponentInitOptions_descriptor_;
  metadata.reflection = LidarComponentInitOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LidarComponentInitOptions

// optional string input_sensor = 1;
bool LidarComponentInitOptions::has_input_sensor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LidarComponentInitOptions::set_has_input_sensor() {
  _has_bits_[0] |= 0x00000001u;
}
void LidarComponentInitOptions::clear_has_input_sensor() {
  _has_bits_[0] &= ~0x00000001u;
}
void LidarComponentInitOptions::clear_input_sensor() {
  input_sensor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_input_sensor();
}
 const ::std::string& LidarComponentInitOptions::input_sensor() const {
  // @@protoc_insertion_point(field_get:perception.LidarComponentInitOptions.input_sensor)
  return input_sensor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LidarComponentInitOptions::set_input_sensor(const ::std::string& value) {
  set_has_input_sensor();
  input_sensor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.LidarComponentInitOptions.input_sensor)
}
 void LidarComponentInitOptions::set_input_sensor(const char* value) {
  set_has_input_sensor();
  input_sensor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.LidarComponentInitOptions.input_sensor)
}
 void LidarComponentInitOptions::set_input_sensor(const char* value, size_t size) {
  set_has_input_sensor();
  input_sensor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.LidarComponentInitOptions.input_sensor)
}
 ::std::string* LidarComponentInitOptions::mutable_input_sensor() {
  set_has_input_sensor();
  // @@protoc_insertion_point(field_mutable:perception.LidarComponentInitOptions.input_sensor)
  return input_sensor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LidarComponentInitOptions::release_input_sensor() {
  // @@protoc_insertion_point(field_release:perception.LidarComponentInitOptions.input_sensor)
  clear_has_input_sensor();
  return input_sensor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LidarComponentInitOptions::set_allocated_input_sensor(::std::string* input_sensor) {
  if (input_sensor != NULL) {
    set_has_input_sensor();
  } else {
    clear_has_input_sensor();
  }
  input_sensor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_sensor);
  // @@protoc_insertion_point(field_set_allocated:perception.LidarComponentInitOptions.input_sensor)
}

// optional .perception.Roi roi = 2;
bool LidarComponentInitOptions::has_roi() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LidarComponentInitOptions::set_has_roi() {
  _has_bits_[0] |= 0x00000002u;
}
void LidarComponentInitOptions::clear_has_roi() {
  _has_bits_[0] &= ~0x00000002u;
}
void LidarComponentInitOptions::clear_roi() {
  if (roi_ != NULL) roi_->::perception::Roi::Clear();
  clear_has_roi();
}
const ::perception::Roi& LidarComponentInitOptions::roi() const {
  // @@protoc_insertion_point(field_get:perception.LidarComponentInitOptions.roi)
  return roi_ != NULL ? *roi_ : *default_instance_->roi_;
}
::perception::Roi* LidarComponentInitOptions::mutable_roi() {
  set_has_roi();
  if (roi_ == NULL) {
    roi_ = new ::perception::Roi;
  }
  // @@protoc_insertion_point(field_mutable:perception.LidarComponentInitOptions.roi)
  return roi_;
}
::perception::Roi* LidarComponentInitOptions::release_roi() {
  // @@protoc_insertion_point(field_release:perception.LidarComponentInitOptions.roi)
  clear_has_roi();
  ::perception::Roi* temp = roi_;
  roi_ = NULL;
  return temp;
}
void LidarComponentInitOptions::set_allocated_roi(::perception::Roi* roi) {
  delete roi_;
  roi_ = roi;
  if (roi) {
    set_has_roi();
  } else {
    clear_has_roi();
  }
  // @@protoc_insertion_point(field_set_allocated:perception.LidarComponentInitOptions.roi)
}

// optional float sensor_height = 4;
bool LidarComponentInitOptions::has_sensor_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LidarComponentInitOptions::set_has_sensor_height() {
  _has_bits_[0] |= 0x00000004u;
}
void LidarComponentInitOptions::clear_has_sensor_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void LidarComponentInitOptions::clear_sensor_height() {
  sensor_height_ = 0;
  clear_has_sensor_height();
}
 float LidarComponentInitOptions::sensor_height() const {
  // @@protoc_insertion_point(field_get:perception.LidarComponentInitOptions.sensor_height)
  return sensor_height_;
}
 void LidarComponentInitOptions::set_sensor_height(float value) {
  set_has_sensor_height();
  sensor_height_ = value;
  // @@protoc_insertion_point(field_set:perception.LidarComponentInitOptions.sensor_height)
}

// optional float downsampling_radius = 5 [default = 0.06];
bool LidarComponentInitOptions::has_downsampling_radius() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LidarComponentInitOptions::set_has_downsampling_radius() {
  _has_bits_[0] |= 0x00000008u;
}
void LidarComponentInitOptions::clear_has_downsampling_radius() {
  _has_bits_[0] &= ~0x00000008u;
}
void LidarComponentInitOptions::clear_downsampling_radius() {
  downsampling_radius_ = 0.06f;
  clear_has_downsampling_radius();
}
 float LidarComponentInitOptions::downsampling_radius() const {
  // @@protoc_insertion_point(field_get:perception.LidarComponentInitOptions.downsampling_radius)
  return downsampling_radius_;
}
 void LidarComponentInitOptions::set_downsampling_radius(float value) {
  set_has_downsampling_radius();
  downsampling_radius_ = value;
  // @@protoc_insertion_point(field_set:perception.LidarComponentInitOptions.downsampling_radius)
}

// optional int32 num_lpr = 6;
bool LidarComponentInitOptions::has_num_lpr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LidarComponentInitOptions::set_has_num_lpr() {
  _has_bits_[0] |= 0x00000010u;
}
void LidarComponentInitOptions::clear_has_num_lpr() {
  _has_bits_[0] &= ~0x00000010u;
}
void LidarComponentInitOptions::clear_num_lpr() {
  num_lpr_ = 0;
  clear_has_num_lpr();
}
 ::google::protobuf::int32 LidarComponentInitOptions::num_lpr() const {
  // @@protoc_insertion_point(field_get:perception.LidarComponentInitOptions.num_lpr)
  return num_lpr_;
}
 void LidarComponentInitOptions::set_num_lpr(::google::protobuf::int32 value) {
  set_has_num_lpr();
  num_lpr_ = value;
  // @@protoc_insertion_point(field_set:perception.LidarComponentInitOptions.num_lpr)
}

// optional float th_dist = 7;
bool LidarComponentInitOptions::has_th_dist() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LidarComponentInitOptions::set_has_th_dist() {
  _has_bits_[0] |= 0x00000020u;
}
void LidarComponentInitOptions::clear_has_th_dist() {
  _has_bits_[0] &= ~0x00000020u;
}
void LidarComponentInitOptions::clear_th_dist() {
  th_dist_ = 0;
  clear_has_th_dist();
}
 float LidarComponentInitOptions::th_dist() const {
  // @@protoc_insertion_point(field_get:perception.LidarComponentInitOptions.th_dist)
  return th_dist_;
}
 void LidarComponentInitOptions::set_th_dist(float value) {
  set_has_th_dist();
  th_dist_ = value;
  // @@protoc_insertion_point(field_set:perception.LidarComponentInitOptions.th_dist)
}

// optional float th_seeds = 8;
bool LidarComponentInitOptions::has_th_seeds() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LidarComponentInitOptions::set_has_th_seeds() {
  _has_bits_[0] |= 0x00000040u;
}
void LidarComponentInitOptions::clear_has_th_seeds() {
  _has_bits_[0] &= ~0x00000040u;
}
void LidarComponentInitOptions::clear_th_seeds() {
  th_seeds_ = 0;
  clear_has_th_seeds();
}
 float LidarComponentInitOptions::th_seeds() const {
  // @@protoc_insertion_point(field_get:perception.LidarComponentInitOptions.th_seeds)
  return th_seeds_;
}
 void LidarComponentInitOptions::set_th_seeds(float value) {
  set_has_th_seeds();
  th_seeds_ = value;
  // @@protoc_insertion_point(field_set:perception.LidarComponentInitOptions.th_seeds)
}

// optional float min_distance = 9;
bool LidarComponentInitOptions::has_min_distance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LidarComponentInitOptions::set_has_min_distance() {
  _has_bits_[0] |= 0x00000080u;
}
void LidarComponentInitOptions::clear_has_min_distance() {
  _has_bits_[0] &= ~0x00000080u;
}
void LidarComponentInitOptions::clear_min_distance() {
  min_distance_ = 0;
  clear_has_min_distance();
}
 float LidarComponentInitOptions::min_distance() const {
  // @@protoc_insertion_point(field_get:perception.LidarComponentInitOptions.min_distance)
  return min_distance_;
}
 void LidarComponentInitOptions::set_min_distance(float value) {
  set_has_min_distance();
  min_distance_ = value;
  // @@protoc_insertion_point(field_set:perception.LidarComponentInitOptions.min_distance)
}

// optional bool publish_cluster = 10 [default = false];
bool LidarComponentInitOptions::has_publish_cluster() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LidarComponentInitOptions::set_has_publish_cluster() {
  _has_bits_[0] |= 0x00000100u;
}
void LidarComponentInitOptions::clear_has_publish_cluster() {
  _has_bits_[0] &= ~0x00000100u;
}
void LidarComponentInitOptions::clear_publish_cluster() {
  publish_cluster_ = false;
  clear_has_publish_cluster();
}
 bool LidarComponentInitOptions::publish_cluster() const {
  // @@protoc_insertion_point(field_get:perception.LidarComponentInitOptions.publish_cluster)
  return publish_cluster_;
}
 void LidarComponentInitOptions::set_publish_cluster(bool value) {
  set_has_publish_cluster();
  publish_cluster_ = value;
  // @@protoc_insertion_point(field_set:perception.LidarComponentInitOptions.publish_cluster)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CameraComponentInitOptions::kInputSensorFieldNumber;
const int CameraComponentInitOptions::kLoadSerializePathFieldNumber;
const int CameraComponentInitOptions::kLoadClassNamesFieldNumber;
const int CameraComponentInitOptions::kPublishObjectsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CameraComponentInitOptions::CameraComponentInitOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.CameraComponentInitOptions)
}

void CameraComponentInitOptions::InitAsDefaultInstance() {
}

CameraComponentInitOptions::CameraComponentInitOptions(const CameraComponentInitOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.CameraComponentInitOptions)
}

void CameraComponentInitOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  input_sensor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  load_serialize_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  load_class_names_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publish_objects_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraComponentInitOptions::~CameraComponentInitOptions() {
  // @@protoc_insertion_point(destructor:perception.CameraComponentInitOptions)
  SharedDtor();
}

void CameraComponentInitOptions::SharedDtor() {
  input_sensor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  load_serialize_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  load_class_names_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publish_objects_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CameraComponentInitOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraComponentInitOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraComponentInitOptions_descriptor_;
}

const CameraComponentInitOptions& CameraComponentInitOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_5fcomponent_2eproto();
  return *default_instance_;
}

CameraComponentInitOptions* CameraComponentInitOptions::default_instance_ = NULL;

CameraComponentInitOptions* CameraComponentInitOptions::New(::google::protobuf::Arena* arena) const {
  CameraComponentInitOptions* n = new CameraComponentInitOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CameraComponentInitOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.CameraComponentInitOptions)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_input_sensor()) {
      input_sensor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_load_serialize_path()) {
      load_serialize_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_load_class_names()) {
      load_class_names_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_publish_objects()) {
      publish_objects_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CameraComponentInitOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.CameraComponentInitOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string input_sensor = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_input_sensor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input_sensor().data(), this->input_sensor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.CameraComponentInitOptions.input_sensor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_load_serialize_path;
        break;
      }

      // optional string load_serialize_path = 2 [deprecated = true];
      case 2: {
        if (tag == 18) {
         parse_load_serialize_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_load_serialize_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->load_serialize_path().data(), this->load_serialize_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.CameraComponentInitOptions.load_serialize_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_load_class_names;
        break;
      }

      // optional string load_class_names = 3 [deprecated = true];
      case 3: {
        if (tag == 26) {
         parse_load_class_names:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_load_class_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->load_class_names().data(), this->load_class_names().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.CameraComponentInitOptions.load_class_names");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_publish_objects;
        break;
      }

      // optional string publish_objects = 6;
      case 6: {
        if (tag == 50) {
         parse_publish_objects:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publish_objects()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->publish_objects().data(), this->publish_objects().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.CameraComponentInitOptions.publish_objects");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.CameraComponentInitOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.CameraComponentInitOptions)
  return false;
#undef DO_
}

void CameraComponentInitOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.CameraComponentInitOptions)
  // optional string input_sensor = 1;
  if (has_input_sensor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_sensor().data(), this->input_sensor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.CameraComponentInitOptions.input_sensor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->input_sensor(), output);
  }

  // optional string load_serialize_path = 2 [deprecated = true];
  if (has_load_serialize_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->load_serialize_path().data(), this->load_serialize_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.CameraComponentInitOptions.load_serialize_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->load_serialize_path(), output);
  }

  // optional string load_class_names = 3 [deprecated = true];
  if (has_load_class_names()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->load_class_names().data(), this->load_class_names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.CameraComponentInitOptions.load_class_names");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->load_class_names(), output);
  }

  // optional string publish_objects = 6;
  if (has_publish_objects()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publish_objects().data(), this->publish_objects().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.CameraComponentInitOptions.publish_objects");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->publish_objects(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.CameraComponentInitOptions)
}

::google::protobuf::uint8* CameraComponentInitOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.CameraComponentInitOptions)
  // optional string input_sensor = 1;
  if (has_input_sensor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input_sensor().data(), this->input_sensor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.CameraComponentInitOptions.input_sensor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->input_sensor(), target);
  }

  // optional string load_serialize_path = 2 [deprecated = true];
  if (has_load_serialize_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->load_serialize_path().data(), this->load_serialize_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.CameraComponentInitOptions.load_serialize_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->load_serialize_path(), target);
  }

  // optional string load_class_names = 3 [deprecated = true];
  if (has_load_class_names()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->load_class_names().data(), this->load_class_names().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.CameraComponentInitOptions.load_class_names");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->load_class_names(), target);
  }

  // optional string publish_objects = 6;
  if (has_publish_objects()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->publish_objects().data(), this->publish_objects().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.CameraComponentInitOptions.publish_objects");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->publish_objects(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.CameraComponentInitOptions)
  return target;
}

int CameraComponentInitOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perception.CameraComponentInitOptions)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional string input_sensor = 1;
    if (has_input_sensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->input_sensor());
    }

    // optional string load_serialize_path = 2 [deprecated = true];
    if (has_load_serialize_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->load_serialize_path());
    }

    // optional string load_class_names = 3 [deprecated = true];
    if (has_load_class_names()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->load_class_names());
    }

    // optional string publish_objects = 6;
    if (has_publish_objects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publish_objects());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraComponentInitOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.CameraComponentInitOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CameraComponentInitOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CameraComponentInitOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.CameraComponentInitOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.CameraComponentInitOptions)
    MergeFrom(*source);
  }
}

void CameraComponentInitOptions::MergeFrom(const CameraComponentInitOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.CameraComponentInitOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input_sensor()) {
      set_has_input_sensor();
      input_sensor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_sensor_);
    }
    if (from.has_load_serialize_path()) {
      set_has_load_serialize_path();
      load_serialize_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.load_serialize_path_);
    }
    if (from.has_load_class_names()) {
      set_has_load_class_names();
      load_class_names_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.load_class_names_);
    }
    if (from.has_publish_objects()) {
      set_has_publish_objects();
      publish_objects_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.publish_objects_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CameraComponentInitOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.CameraComponentInitOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraComponentInitOptions::CopyFrom(const CameraComponentInitOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.CameraComponentInitOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraComponentInitOptions::IsInitialized() const {

  return true;
}

void CameraComponentInitOptions::Swap(CameraComponentInitOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CameraComponentInitOptions::InternalSwap(CameraComponentInitOptions* other) {
  input_sensor_.Swap(&other->input_sensor_);
  load_serialize_path_.Swap(&other->load_serialize_path_);
  load_class_names_.Swap(&other->load_class_names_);
  publish_objects_.Swap(&other->publish_objects_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CameraComponentInitOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraComponentInitOptions_descriptor_;
  metadata.reflection = CameraComponentInitOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CameraComponentInitOptions

// optional string input_sensor = 1;
bool CameraComponentInitOptions::has_input_sensor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CameraComponentInitOptions::set_has_input_sensor() {
  _has_bits_[0] |= 0x00000001u;
}
void CameraComponentInitOptions::clear_has_input_sensor() {
  _has_bits_[0] &= ~0x00000001u;
}
void CameraComponentInitOptions::clear_input_sensor() {
  input_sensor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_input_sensor();
}
 const ::std::string& CameraComponentInitOptions::input_sensor() const {
  // @@protoc_insertion_point(field_get:perception.CameraComponentInitOptions.input_sensor)
  return input_sensor_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraComponentInitOptions::set_input_sensor(const ::std::string& value) {
  set_has_input_sensor();
  input_sensor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.CameraComponentInitOptions.input_sensor)
}
 void CameraComponentInitOptions::set_input_sensor(const char* value) {
  set_has_input_sensor();
  input_sensor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.CameraComponentInitOptions.input_sensor)
}
 void CameraComponentInitOptions::set_input_sensor(const char* value, size_t size) {
  set_has_input_sensor();
  input_sensor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.CameraComponentInitOptions.input_sensor)
}
 ::std::string* CameraComponentInitOptions::mutable_input_sensor() {
  set_has_input_sensor();
  // @@protoc_insertion_point(field_mutable:perception.CameraComponentInitOptions.input_sensor)
  return input_sensor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CameraComponentInitOptions::release_input_sensor() {
  // @@protoc_insertion_point(field_release:perception.CameraComponentInitOptions.input_sensor)
  clear_has_input_sensor();
  return input_sensor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraComponentInitOptions::set_allocated_input_sensor(::std::string* input_sensor) {
  if (input_sensor != NULL) {
    set_has_input_sensor();
  } else {
    clear_has_input_sensor();
  }
  input_sensor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_sensor);
  // @@protoc_insertion_point(field_set_allocated:perception.CameraComponentInitOptions.input_sensor)
}

// optional string load_serialize_path = 2 [deprecated = true];
bool CameraComponentInitOptions::has_load_serialize_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CameraComponentInitOptions::set_has_load_serialize_path() {
  _has_bits_[0] |= 0x00000002u;
}
void CameraComponentInitOptions::clear_has_load_serialize_path() {
  _has_bits_[0] &= ~0x00000002u;
}
void CameraComponentInitOptions::clear_load_serialize_path() {
  load_serialize_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_load_serialize_path();
}
 const ::std::string& CameraComponentInitOptions::load_serialize_path() const {
  // @@protoc_insertion_point(field_get:perception.CameraComponentInitOptions.load_serialize_path)
  return load_serialize_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraComponentInitOptions::set_load_serialize_path(const ::std::string& value) {
  set_has_load_serialize_path();
  load_serialize_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.CameraComponentInitOptions.load_serialize_path)
}
 void CameraComponentInitOptions::set_load_serialize_path(const char* value) {
  set_has_load_serialize_path();
  load_serialize_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.CameraComponentInitOptions.load_serialize_path)
}
 void CameraComponentInitOptions::set_load_serialize_path(const char* value, size_t size) {
  set_has_load_serialize_path();
  load_serialize_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.CameraComponentInitOptions.load_serialize_path)
}
 ::std::string* CameraComponentInitOptions::mutable_load_serialize_path() {
  set_has_load_serialize_path();
  // @@protoc_insertion_point(field_mutable:perception.CameraComponentInitOptions.load_serialize_path)
  return load_serialize_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CameraComponentInitOptions::release_load_serialize_path() {
  // @@protoc_insertion_point(field_release:perception.CameraComponentInitOptions.load_serialize_path)
  clear_has_load_serialize_path();
  return load_serialize_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraComponentInitOptions::set_allocated_load_serialize_path(::std::string* load_serialize_path) {
  if (load_serialize_path != NULL) {
    set_has_load_serialize_path();
  } else {
    clear_has_load_serialize_path();
  }
  load_serialize_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), load_serialize_path);
  // @@protoc_insertion_point(field_set_allocated:perception.CameraComponentInitOptions.load_serialize_path)
}

// optional string load_class_names = 3 [deprecated = true];
bool CameraComponentInitOptions::has_load_class_names() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CameraComponentInitOptions::set_has_load_class_names() {
  _has_bits_[0] |= 0x00000004u;
}
void CameraComponentInitOptions::clear_has_load_class_names() {
  _has_bits_[0] &= ~0x00000004u;
}
void CameraComponentInitOptions::clear_load_class_names() {
  load_class_names_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_load_class_names();
}
 const ::std::string& CameraComponentInitOptions::load_class_names() const {
  // @@protoc_insertion_point(field_get:perception.CameraComponentInitOptions.load_class_names)
  return load_class_names_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraComponentInitOptions::set_load_class_names(const ::std::string& value) {
  set_has_load_class_names();
  load_class_names_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.CameraComponentInitOptions.load_class_names)
}
 void CameraComponentInitOptions::set_load_class_names(const char* value) {
  set_has_load_class_names();
  load_class_names_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.CameraComponentInitOptions.load_class_names)
}
 void CameraComponentInitOptions::set_load_class_names(const char* value, size_t size) {
  set_has_load_class_names();
  load_class_names_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.CameraComponentInitOptions.load_class_names)
}
 ::std::string* CameraComponentInitOptions::mutable_load_class_names() {
  set_has_load_class_names();
  // @@protoc_insertion_point(field_mutable:perception.CameraComponentInitOptions.load_class_names)
  return load_class_names_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CameraComponentInitOptions::release_load_class_names() {
  // @@protoc_insertion_point(field_release:perception.CameraComponentInitOptions.load_class_names)
  clear_has_load_class_names();
  return load_class_names_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraComponentInitOptions::set_allocated_load_class_names(::std::string* load_class_names) {
  if (load_class_names != NULL) {
    set_has_load_class_names();
  } else {
    clear_has_load_class_names();
  }
  load_class_names_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), load_class_names);
  // @@protoc_insertion_point(field_set_allocated:perception.CameraComponentInitOptions.load_class_names)
}

// optional string publish_objects = 6;
bool CameraComponentInitOptions::has_publish_objects() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CameraComponentInitOptions::set_has_publish_objects() {
  _has_bits_[0] |= 0x00000008u;
}
void CameraComponentInitOptions::clear_has_publish_objects() {
  _has_bits_[0] &= ~0x00000008u;
}
void CameraComponentInitOptions::clear_publish_objects() {
  publish_objects_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_publish_objects();
}
 const ::std::string& CameraComponentInitOptions::publish_objects() const {
  // @@protoc_insertion_point(field_get:perception.CameraComponentInitOptions.publish_objects)
  return publish_objects_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraComponentInitOptions::set_publish_objects(const ::std::string& value) {
  set_has_publish_objects();
  publish_objects_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.CameraComponentInitOptions.publish_objects)
}
 void CameraComponentInitOptions::set_publish_objects(const char* value) {
  set_has_publish_objects();
  publish_objects_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.CameraComponentInitOptions.publish_objects)
}
 void CameraComponentInitOptions::set_publish_objects(const char* value, size_t size) {
  set_has_publish_objects();
  publish_objects_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.CameraComponentInitOptions.publish_objects)
}
 ::std::string* CameraComponentInitOptions::mutable_publish_objects() {
  set_has_publish_objects();
  // @@protoc_insertion_point(field_mutable:perception.CameraComponentInitOptions.publish_objects)
  return publish_objects_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CameraComponentInitOptions::release_publish_objects() {
  // @@protoc_insertion_point(field_release:perception.CameraComponentInitOptions.publish_objects)
  clear_has_publish_objects();
  return publish_objects_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CameraComponentInitOptions::set_allocated_publish_objects(::std::string* publish_objects) {
  if (publish_objects != NULL) {
    set_has_publish_objects();
  } else {
    clear_has_publish_objects();
  }
  publish_objects_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), publish_objects);
  // @@protoc_insertion_point(field_set_allocated:perception.CameraComponentInitOptions.publish_objects)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VirtualObject::kIdFieldNumber;
const int VirtualObject::kPositionFieldNumber;
const int VirtualObject::kSizeFieldNumber;
const int VirtualObject::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VirtualObject::VirtualObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.VirtualObject)
}

void VirtualObject::InitAsDefaultInstance() {
  position_ = const_cast< ::perception::Vector3*>(&::perception::Vector3::default_instance());
  size_ = const_cast< ::perception::Vector3*>(&::perception::Vector3::default_instance());
}

VirtualObject::VirtualObject(const VirtualObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.VirtualObject)
}

void VirtualObject::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  position_ = NULL;
  size_ = NULL;
  yaw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VirtualObject::~VirtualObject() {
  // @@protoc_insertion_point(destructor:perception.VirtualObject)
  SharedDtor();
}

void VirtualObject::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete size_;
  }
}

void VirtualObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VirtualObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VirtualObject_descriptor_;
}

const VirtualObject& VirtualObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_5fcomponent_2eproto();
  return *default_instance_;
}

VirtualObject* VirtualObject::default_instance_ = NULL;

VirtualObject* VirtualObject::New(::google::protobuf::Arena* arena) const {
  VirtualObject* n = new VirtualObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VirtualObject::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.VirtualObject)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VirtualObject, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VirtualObject*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(yaw_, id_);
    if (has_position()) {
      if (position_ != NULL) position_->::perception::Vector3::Clear();
    }
    if (has_size()) {
      if (size_ != NULL) size_->::perception::Vector3::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VirtualObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.VirtualObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // optional .perception.Vector3 position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_size;
        break;
      }

      // optional .perception.Vector3 size = 3;
      case 3: {
        if (tag == 26) {
         parse_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_size()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_yaw;
        break;
      }

      // optional double yaw = 4;
      case 4: {
        if (tag == 33) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.VirtualObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.VirtualObject)
  return false;
#undef DO_
}

void VirtualObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.VirtualObject)
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .perception.Vector3 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // optional .perception.Vector3 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->size_, output);
  }

  // optional double yaw = 4;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->yaw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.VirtualObject)
}

::google::protobuf::uint8* VirtualObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.VirtualObject)
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .perception.Vector3 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, false, target);
  }

  // optional .perception.Vector3 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->size_, false, target);
  }

  // optional double yaw = 4;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->yaw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.VirtualObject)
  return target;
}

int VirtualObject::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perception.VirtualObject)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .perception.Vector3 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .perception.Vector3 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->size_);
    }

    // optional double yaw = 4;
    if (has_yaw()) {
      total_size += 1 + 8;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VirtualObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.VirtualObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const VirtualObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const VirtualObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.VirtualObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.VirtualObject)
    MergeFrom(*source);
  }
}

void VirtualObject::MergeFrom(const VirtualObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.VirtualObject)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_position()) {
      mutable_position()->::perception::Vector3::MergeFrom(from.position());
    }
    if (from.has_size()) {
      mutable_size()->::perception::Vector3::MergeFrom(from.size());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void VirtualObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.VirtualObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VirtualObject::CopyFrom(const VirtualObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.VirtualObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VirtualObject::IsInitialized() const {

  return true;
}

void VirtualObject::Swap(VirtualObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VirtualObject::InternalSwap(VirtualObject* other) {
  std::swap(id_, other->id_);
  std::swap(position_, other->position_);
  std::swap(size_, other->size_);
  std::swap(yaw_, other->yaw_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VirtualObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VirtualObject_descriptor_;
  metadata.reflection = VirtualObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VirtualObject

// optional uint32 id = 1;
bool VirtualObject::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VirtualObject::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void VirtualObject::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void VirtualObject::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 VirtualObject::id() const {
  // @@protoc_insertion_point(field_get:perception.VirtualObject.id)
  return id_;
}
 void VirtualObject::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:perception.VirtualObject.id)
}

// optional .perception.Vector3 position = 2;
bool VirtualObject::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VirtualObject::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void VirtualObject::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void VirtualObject::clear_position() {
  if (position_ != NULL) position_->::perception::Vector3::Clear();
  clear_has_position();
}
const ::perception::Vector3& VirtualObject::position() const {
  // @@protoc_insertion_point(field_get:perception.VirtualObject.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::perception::Vector3* VirtualObject::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::perception::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:perception.VirtualObject.position)
  return position_;
}
::perception::Vector3* VirtualObject::release_position() {
  // @@protoc_insertion_point(field_release:perception.VirtualObject.position)
  clear_has_position();
  ::perception::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
void VirtualObject::set_allocated_position(::perception::Vector3* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:perception.VirtualObject.position)
}

// optional .perception.Vector3 size = 3;
bool VirtualObject::has_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VirtualObject::set_has_size() {
  _has_bits_[0] |= 0x00000004u;
}
void VirtualObject::clear_has_size() {
  _has_bits_[0] &= ~0x00000004u;
}
void VirtualObject::clear_size() {
  if (size_ != NULL) size_->::perception::Vector3::Clear();
  clear_has_size();
}
const ::perception::Vector3& VirtualObject::size() const {
  // @@protoc_insertion_point(field_get:perception.VirtualObject.size)
  return size_ != NULL ? *size_ : *default_instance_->size_;
}
::perception::Vector3* VirtualObject::mutable_size() {
  set_has_size();
  if (size_ == NULL) {
    size_ = new ::perception::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:perception.VirtualObject.size)
  return size_;
}
::perception::Vector3* VirtualObject::release_size() {
  // @@protoc_insertion_point(field_release:perception.VirtualObject.size)
  clear_has_size();
  ::perception::Vector3* temp = size_;
  size_ = NULL;
  return temp;
}
void VirtualObject::set_allocated_size(::perception::Vector3* size) {
  delete size_;
  size_ = size;
  if (size) {
    set_has_size();
  } else {
    clear_has_size();
  }
  // @@protoc_insertion_point(field_set_allocated:perception.VirtualObject.size)
}

// optional double yaw = 4;
bool VirtualObject::has_yaw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VirtualObject::set_has_yaw() {
  _has_bits_[0] |= 0x00000008u;
}
void VirtualObject::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000008u;
}
void VirtualObject::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
 double VirtualObject::yaw() const {
  // @@protoc_insertion_point(field_get:perception.VirtualObject.yaw)
  return yaw_;
}
 void VirtualObject::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:perception.VirtualObject.yaw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FusionComponentInitOptions::kUseLidarFieldNumber;
const int FusionComponentInitOptions::kUseRadarFieldNumber;
const int FusionComponentInitOptions::kUseCameraFieldNumber;
const int FusionComponentInitOptions::kInputSensorFieldNumber;
const int FusionComponentInitOptions::kFusionMethodFieldNumber;
const int FusionComponentInitOptions::kFusionMainSensorsFieldNumber;
const int FusionComponentInitOptions::kObjectInRoiCheckFieldNumber;
const int FusionComponentInitOptions::kRadiusForRoiObjectCheckFieldNumber;
const int FusionComponentInitOptions::kLocalizationTopicFieldNumber;
const int FusionComponentInitOptions::kOutputObstaclesTopicNameFieldNumber;
const int FusionComponentInitOptions::kOutputObstaclesTopicNameAppFieldNumber;
const int FusionComponentInitOptions::kOutputVizFusedBoxTopicNameFieldNumber;
const int FusionComponentInitOptions::kOutputVizFusedTextTopicNameFieldNumber;
const int FusionComponentInitOptions::kEnablePublishFusionTopicFieldNumber;
const int FusionComponentInitOptions::kEnablePublishFusionTopicAppFieldNumber;
const int FusionComponentInitOptions::kUseObuFieldNumber;
const int FusionComponentInitOptions::kUseVidarFieldNumber;
const int FusionComponentInitOptions::kPubVidarFieldNumber;
const int FusionComponentInitOptions::kPubRadarFieldNumber;
const int FusionComponentInitOptions::kPubObuFieldNumber;
const int FusionComponentInitOptions::kUseFalconLidarFieldNumber;
const int FusionComponentInitOptions::kFalconLidarFilterDistanceFieldNumber;
const int FusionComponentInitOptions::kVirtualObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FusionComponentInitOptions::FusionComponentInitOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:perception.FusionComponentInitOptions)
}

void FusionComponentInitOptions::InitAsDefaultInstance() {
}

FusionComponentInitOptions::FusionComponentInitOptions(const FusionComponentInitOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:perception.FusionComponentInitOptions)
}

void FusionComponentInitOptions::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  use_lidar_ = true;
  use_radar_ = false;
  use_camera_ = true;
  fusion_method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_in_roi_check_ = false;
  radius_for_roi_object_check_ = 0;
  localization_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_obstacles_topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_obstacles_topic_name_app_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_viz_fused_box_topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_viz_fused_text_topic_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  enable_publish_fusion_topic_ = true;
  enable_publish_fusion_topic_app_ = true;
  use_obu_ = true;
  use_vidar_ = false;
  pub_vidar_ = false;
  pub_radar_ = false;
  pub_obu_ = false;
  use_falcon_lidar_ = true;
  falcon_lidar_filter_distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FusionComponentInitOptions::~FusionComponentInitOptions() {
  // @@protoc_insertion_point(destructor:perception.FusionComponentInitOptions)
  SharedDtor();
}

void FusionComponentInitOptions::SharedDtor() {
  fusion_method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  localization_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_obstacles_topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_obstacles_topic_name_app_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_viz_fused_box_topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  output_viz_fused_text_topic_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void FusionComponentInitOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FusionComponentInitOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FusionComponentInitOptions_descriptor_;
}

const FusionComponentInitOptions& FusionComponentInitOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_perception_5fcomponent_2eproto();
  return *default_instance_;
}

FusionComponentInitOptions* FusionComponentInitOptions::default_instance_ = NULL;

FusionComponentInitOptions* FusionComponentInitOptions::New(::google::protobuf::Arena* arena) const {
  FusionComponentInitOptions* n = new FusionComponentInitOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FusionComponentInitOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:perception.FusionComponentInitOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FusionComponentInitOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FusionComponentInitOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 215u) {
    use_lidar_ = true;
    use_radar_ = false;
    use_camera_ = true;
    if (has_fusion_method()) {
      fusion_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    object_in_roi_check_ = false;
    radius_for_roi_object_check_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280u) {
    if (has_localization_topic()) {
      localization_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_output_obstacles_topic_name()) {
      output_obstacles_topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_output_obstacles_topic_name_app()) {
      output_obstacles_topic_name_app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_output_viz_fused_box_topic_name()) {
      output_viz_fused_box_topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_output_viz_fused_text_topic_name()) {
      output_viz_fused_text_topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    enable_publish_fusion_topic_ = true;
    enable_publish_fusion_topic_app_ = true;
    use_obu_ = true;
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ZR_(pub_vidar_, pub_obu_);
    use_vidar_ = false;
    use_falcon_lidar_ = true;
    falcon_lidar_filter_distance_ = 0;
  }

#undef ZR_HELPER_
#undef ZR_

  input_sensor_.Clear();
  fusion_main_sensors_.Clear();
  virtual_object_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FusionComponentInitOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:perception.FusionComponentInitOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool use_lidar = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_lidar_)));
          set_has_use_lidar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_use_radar;
        break;
      }

      // optional bool use_radar = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_use_radar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_radar_)));
          set_has_use_radar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_use_camera;
        break;
      }

      // optional bool use_camera = 3 [default = true];
      case 3: {
        if (tag == 24) {
         parse_use_camera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_camera_)));
          set_has_use_camera();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_input_sensor;
        break;
      }

      // repeated .perception.InputSensor input_sensor = 4;
      case 4: {
        if (tag == 34) {
         parse_input_sensor:
          DO_(input->IncrementRecursionDepth());
         parse_loop_input_sensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_input_sensor()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_input_sensor;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_fusion_method;
        break;
      }

      // optional string fusion_method = 5;
      case 5: {
        if (tag == 42) {
         parse_fusion_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fusion_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fusion_method().data(), this->fusion_method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.FusionComponentInitOptions.fusion_method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fusion_main_sensors;
        break;
      }

      // repeated string fusion_main_sensors = 6;
      case 6: {
        if (tag == 50) {
         parse_fusion_main_sensors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_fusion_main_sensors()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fusion_main_sensors(this->fusion_main_sensors_size() - 1).data(),
            this->fusion_main_sensors(this->fusion_main_sensors_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.FusionComponentInitOptions.fusion_main_sensors");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_fusion_main_sensors;
        if (input->ExpectTag(56)) goto parse_object_in_roi_check;
        break;
      }

      // optional bool object_in_roi_check = 7;
      case 7: {
        if (tag == 56) {
         parse_object_in_roi_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &object_in_roi_check_)));
          set_has_object_in_roi_check();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_radius_for_roi_object_check;
        break;
      }

      // optional double radius_for_roi_object_check = 8;
      case 8: {
        if (tag == 65) {
         parse_radius_for_roi_object_check:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_for_roi_object_check_)));
          set_has_radius_for_roi_object_check();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_localization_topic;
        break;
      }

      // optional string localization_topic = 9;
      case 9: {
        if (tag == 74) {
         parse_localization_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_localization_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->localization_topic().data(), this->localization_topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.FusionComponentInitOptions.localization_topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_output_obstacles_topic_name;
        break;
      }

      // optional string output_obstacles_topic_name = 10;
      case 10: {
        if (tag == 82) {
         parse_output_obstacles_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_obstacles_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_obstacles_topic_name().data(), this->output_obstacles_topic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.FusionComponentInitOptions.output_obstacles_topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_output_obstacles_topic_name_app;
        break;
      }

      // optional string output_obstacles_topic_name_app = 11;
      case 11: {
        if (tag == 90) {
         parse_output_obstacles_topic_name_app:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_obstacles_topic_name_app()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_obstacles_topic_name_app().data(), this->output_obstacles_topic_name_app().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.FusionComponentInitOptions.output_obstacles_topic_name_app");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_output_viz_fused_box_topic_name;
        break;
      }

      // optional string output_viz_fused_box_topic_name = 12;
      case 12: {
        if (tag == 98) {
         parse_output_viz_fused_box_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_viz_fused_box_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_viz_fused_box_topic_name().data(), this->output_viz_fused_box_topic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.FusionComponentInitOptions.output_viz_fused_box_topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_output_viz_fused_text_topic_name;
        break;
      }

      // optional string output_viz_fused_text_topic_name = 13;
      case 13: {
        if (tag == 106) {
         parse_output_viz_fused_text_topic_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_output_viz_fused_text_topic_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->output_viz_fused_text_topic_name().data(), this->output_viz_fused_text_topic_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "perception.FusionComponentInitOptions.output_viz_fused_text_topic_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_enable_publish_fusion_topic;
        break;
      }

      // optional bool enable_publish_fusion_topic = 14 [default = true];
      case 14: {
        if (tag == 112) {
         parse_enable_publish_fusion_topic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_publish_fusion_topic_)));
          set_has_enable_publish_fusion_topic();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_enable_publish_fusion_topic_app;
        break;
      }

      // optional bool enable_publish_fusion_topic_app = 15 [default = true];
      case 15: {
        if (tag == 120) {
         parse_enable_publish_fusion_topic_app:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_publish_fusion_topic_app_)));
          set_has_enable_publish_fusion_topic_app();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_use_obu;
        break;
      }

      // optional bool use_obu = 16 [default = true];
      case 16: {
        if (tag == 128) {
         parse_use_obu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_obu_)));
          set_has_use_obu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_use_vidar;
        break;
      }

      // optional bool use_vidar = 17 [default = false];
      case 17: {
        if (tag == 136) {
         parse_use_vidar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_vidar_)));
          set_has_use_vidar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_pub_vidar;
        break;
      }

      // optional bool pub_vidar = 18 [default = false];
      case 18: {
        if (tag == 144) {
         parse_pub_vidar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pub_vidar_)));
          set_has_pub_vidar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_pub_radar;
        break;
      }

      // optional bool pub_radar = 19 [default = false];
      case 19: {
        if (tag == 152) {
         parse_pub_radar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pub_radar_)));
          set_has_pub_radar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_pub_obu;
        break;
      }

      // optional bool pub_obu = 20 [default = false];
      case 20: {
        if (tag == 160) {
         parse_pub_obu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pub_obu_)));
          set_has_pub_obu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_use_falcon_lidar;
        break;
      }

      // optional bool use_falcon_lidar = 21 [default = true];
      case 21: {
        if (tag == 168) {
         parse_use_falcon_lidar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_falcon_lidar_)));
          set_has_use_falcon_lidar();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_falcon_lidar_filter_distance;
        break;
      }

      // optional double falcon_lidar_filter_distance = 22;
      case 22: {
        if (tag == 177) {
         parse_falcon_lidar_filter_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &falcon_lidar_filter_distance_)));
          set_has_falcon_lidar_filter_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_virtual_object;
        break;
      }

      // repeated .perception.VirtualObject virtual_object = 23;
      case 23: {
        if (tag == 186) {
         parse_virtual_object:
          DO_(input->IncrementRecursionDepth());
         parse_loop_virtual_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_virtual_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_loop_virtual_object;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:perception.FusionComponentInitOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:perception.FusionComponentInitOptions)
  return false;
#undef DO_
}

void FusionComponentInitOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:perception.FusionComponentInitOptions)
  // optional bool use_lidar = 1 [default = true];
  if (has_use_lidar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->use_lidar(), output);
  }

  // optional bool use_radar = 2 [default = false];
  if (has_use_radar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_radar(), output);
  }

  // optional bool use_camera = 3 [default = true];
  if (has_use_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->use_camera(), output);
  }

  // repeated .perception.InputSensor input_sensor = 4;
  for (unsigned int i = 0, n = this->input_sensor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->input_sensor(i), output);
  }

  // optional string fusion_method = 5;
  if (has_fusion_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fusion_method().data(), this->fusion_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.FusionComponentInitOptions.fusion_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->fusion_method(), output);
  }

  // repeated string fusion_main_sensors = 6;
  for (int i = 0; i < this->fusion_main_sensors_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fusion_main_sensors(i).data(), this->fusion_main_sensors(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.FusionComponentInitOptions.fusion_main_sensors");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->fusion_main_sensors(i), output);
  }

  // optional bool object_in_roi_check = 7;
  if (has_object_in_roi_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->object_in_roi_check(), output);
  }

  // optional double radius_for_roi_object_check = 8;
  if (has_radius_for_roi_object_check()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->radius_for_roi_object_check(), output);
  }

  // optional string localization_topic = 9;
  if (has_localization_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localization_topic().data(), this->localization_topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.FusionComponentInitOptions.localization_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->localization_topic(), output);
  }

  // optional string output_obstacles_topic_name = 10;
  if (has_output_obstacles_topic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_obstacles_topic_name().data(), this->output_obstacles_topic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.FusionComponentInitOptions.output_obstacles_topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->output_obstacles_topic_name(), output);
  }

  // optional string output_obstacles_topic_name_app = 11;
  if (has_output_obstacles_topic_name_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_obstacles_topic_name_app().data(), this->output_obstacles_topic_name_app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.FusionComponentInitOptions.output_obstacles_topic_name_app");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->output_obstacles_topic_name_app(), output);
  }

  // optional string output_viz_fused_box_topic_name = 12;
  if (has_output_viz_fused_box_topic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_viz_fused_box_topic_name().data(), this->output_viz_fused_box_topic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.FusionComponentInitOptions.output_viz_fused_box_topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->output_viz_fused_box_topic_name(), output);
  }

  // optional string output_viz_fused_text_topic_name = 13;
  if (has_output_viz_fused_text_topic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_viz_fused_text_topic_name().data(), this->output_viz_fused_text_topic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.FusionComponentInitOptions.output_viz_fused_text_topic_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->output_viz_fused_text_topic_name(), output);
  }

  // optional bool enable_publish_fusion_topic = 14 [default = true];
  if (has_enable_publish_fusion_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->enable_publish_fusion_topic(), output);
  }

  // optional bool enable_publish_fusion_topic_app = 15 [default = true];
  if (has_enable_publish_fusion_topic_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->enable_publish_fusion_topic_app(), output);
  }

  // optional bool use_obu = 16 [default = true];
  if (has_use_obu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->use_obu(), output);
  }

  // optional bool use_vidar = 17 [default = false];
  if (has_use_vidar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->use_vidar(), output);
  }

  // optional bool pub_vidar = 18 [default = false];
  if (has_pub_vidar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->pub_vidar(), output);
  }

  // optional bool pub_radar = 19 [default = false];
  if (has_pub_radar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->pub_radar(), output);
  }

  // optional bool pub_obu = 20 [default = false];
  if (has_pub_obu()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->pub_obu(), output);
  }

  // optional bool use_falcon_lidar = 21 [default = true];
  if (has_use_falcon_lidar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->use_falcon_lidar(), output);
  }

  // optional double falcon_lidar_filter_distance = 22;
  if (has_falcon_lidar_filter_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->falcon_lidar_filter_distance(), output);
  }

  // repeated .perception.VirtualObject virtual_object = 23;
  for (unsigned int i = 0, n = this->virtual_object_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->virtual_object(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:perception.FusionComponentInitOptions)
}

::google::protobuf::uint8* FusionComponentInitOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:perception.FusionComponentInitOptions)
  // optional bool use_lidar = 1 [default = true];
  if (has_use_lidar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->use_lidar(), target);
  }

  // optional bool use_radar = 2 [default = false];
  if (has_use_radar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_radar(), target);
  }

  // optional bool use_camera = 3 [default = true];
  if (has_use_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->use_camera(), target);
  }

  // repeated .perception.InputSensor input_sensor = 4;
  for (unsigned int i = 0, n = this->input_sensor_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->input_sensor(i), false, target);
  }

  // optional string fusion_method = 5;
  if (has_fusion_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fusion_method().data(), this->fusion_method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.FusionComponentInitOptions.fusion_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->fusion_method(), target);
  }

  // repeated string fusion_main_sensors = 6;
  for (int i = 0; i < this->fusion_main_sensors_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fusion_main_sensors(i).data(), this->fusion_main_sensors(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.FusionComponentInitOptions.fusion_main_sensors");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->fusion_main_sensors(i), target);
  }

  // optional bool object_in_roi_check = 7;
  if (has_object_in_roi_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->object_in_roi_check(), target);
  }

  // optional double radius_for_roi_object_check = 8;
  if (has_radius_for_roi_object_check()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->radius_for_roi_object_check(), target);
  }

  // optional string localization_topic = 9;
  if (has_localization_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->localization_topic().data(), this->localization_topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.FusionComponentInitOptions.localization_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->localization_topic(), target);
  }

  // optional string output_obstacles_topic_name = 10;
  if (has_output_obstacles_topic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_obstacles_topic_name().data(), this->output_obstacles_topic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.FusionComponentInitOptions.output_obstacles_topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->output_obstacles_topic_name(), target);
  }

  // optional string output_obstacles_topic_name_app = 11;
  if (has_output_obstacles_topic_name_app()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_obstacles_topic_name_app().data(), this->output_obstacles_topic_name_app().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.FusionComponentInitOptions.output_obstacles_topic_name_app");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->output_obstacles_topic_name_app(), target);
  }

  // optional string output_viz_fused_box_topic_name = 12;
  if (has_output_viz_fused_box_topic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_viz_fused_box_topic_name().data(), this->output_viz_fused_box_topic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.FusionComponentInitOptions.output_viz_fused_box_topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->output_viz_fused_box_topic_name(), target);
  }

  // optional string output_viz_fused_text_topic_name = 13;
  if (has_output_viz_fused_text_topic_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->output_viz_fused_text_topic_name().data(), this->output_viz_fused_text_topic_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "perception.FusionComponentInitOptions.output_viz_fused_text_topic_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->output_viz_fused_text_topic_name(), target);
  }

  // optional bool enable_publish_fusion_topic = 14 [default = true];
  if (has_enable_publish_fusion_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->enable_publish_fusion_topic(), target);
  }

  // optional bool enable_publish_fusion_topic_app = 15 [default = true];
  if (has_enable_publish_fusion_topic_app()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->enable_publish_fusion_topic_app(), target);
  }

  // optional bool use_obu = 16 [default = true];
  if (has_use_obu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->use_obu(), target);
  }

  // optional bool use_vidar = 17 [default = false];
  if (has_use_vidar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->use_vidar(), target);
  }

  // optional bool pub_vidar = 18 [default = false];
  if (has_pub_vidar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->pub_vidar(), target);
  }

  // optional bool pub_radar = 19 [default = false];
  if (has_pub_radar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->pub_radar(), target);
  }

  // optional bool pub_obu = 20 [default = false];
  if (has_pub_obu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->pub_obu(), target);
  }

  // optional bool use_falcon_lidar = 21 [default = true];
  if (has_use_falcon_lidar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->use_falcon_lidar(), target);
  }

  // optional double falcon_lidar_filter_distance = 22;
  if (has_falcon_lidar_filter_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->falcon_lidar_filter_distance(), target);
  }

  // repeated .perception.VirtualObject virtual_object = 23;
  for (unsigned int i = 0, n = this->virtual_object_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        23, this->virtual_object(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:perception.FusionComponentInitOptions)
  return target;
}

int FusionComponentInitOptions::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:perception.FusionComponentInitOptions)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 215u) {
    // optional bool use_lidar = 1 [default = true];
    if (has_use_lidar()) {
      total_size += 1 + 1;
    }

    // optional bool use_radar = 2 [default = false];
    if (has_use_radar()) {
      total_size += 1 + 1;
    }

    // optional bool use_camera = 3 [default = true];
    if (has_use_camera()) {
      total_size += 1 + 1;
    }

    // optional string fusion_method = 5;
    if (has_fusion_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fusion_method());
    }

    // optional bool object_in_roi_check = 7;
    if (has_object_in_roi_check()) {
      total_size += 1 + 1;
    }

    // optional double radius_for_roi_object_check = 8;
    if (has_radius_for_roi_object_check()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string localization_topic = 9;
    if (has_localization_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->localization_topic());
    }

    // optional string output_obstacles_topic_name = 10;
    if (has_output_obstacles_topic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_obstacles_topic_name());
    }

    // optional string output_obstacles_topic_name_app = 11;
    if (has_output_obstacles_topic_name_app()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_obstacles_topic_name_app());
    }

    // optional string output_viz_fused_box_topic_name = 12;
    if (has_output_viz_fused_box_topic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_viz_fused_box_topic_name());
    }

    // optional string output_viz_fused_text_topic_name = 13;
    if (has_output_viz_fused_text_topic_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->output_viz_fused_text_topic_name());
    }

    // optional bool enable_publish_fusion_topic = 14 [default = true];
    if (has_enable_publish_fusion_topic()) {
      total_size += 1 + 1;
    }

    // optional bool enable_publish_fusion_topic_app = 15 [default = true];
    if (has_enable_publish_fusion_topic_app()) {
      total_size += 1 + 1;
    }

    // optional bool use_obu = 16 [default = true];
    if (has_use_obu()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional bool use_vidar = 17 [default = false];
    if (has_use_vidar()) {
      total_size += 2 + 1;
    }

    // optional bool pub_vidar = 18 [default = false];
    if (has_pub_vidar()) {
      total_size += 2 + 1;
    }

    // optional bool pub_radar = 19 [default = false];
    if (has_pub_radar()) {
      total_size += 2 + 1;
    }

    // optional bool pub_obu = 20 [default = false];
    if (has_pub_obu()) {
      total_size += 2 + 1;
    }

    // optional bool use_falcon_lidar = 21 [default = true];
    if (has_use_falcon_lidar()) {
      total_size += 2 + 1;
    }

    // optional double falcon_lidar_filter_distance = 22;
    if (has_falcon_lidar_filter_distance()) {
      total_size += 2 + 8;
    }

  }
  // repeated .perception.InputSensor input_sensor = 4;
  total_size += 1 * this->input_sensor_size();
  for (int i = 0; i < this->input_sensor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->input_sensor(i));
  }

  // repeated string fusion_main_sensors = 6;
  total_size += 1 * this->fusion_main_sensors_size();
  for (int i = 0; i < this->fusion_main_sensors_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->fusion_main_sensors(i));
  }

  // repeated .perception.VirtualObject virtual_object = 23;
  total_size += 2 * this->virtual_object_size();
  for (int i = 0; i < this->virtual_object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtual_object(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FusionComponentInitOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:perception.FusionComponentInitOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FusionComponentInitOptions* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FusionComponentInitOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:perception.FusionComponentInitOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:perception.FusionComponentInitOptions)
    MergeFrom(*source);
  }
}

void FusionComponentInitOptions::MergeFrom(const FusionComponentInitOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:perception.FusionComponentInitOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  input_sensor_.MergeFrom(from.input_sensor_);
  fusion_main_sensors_.MergeFrom(from.fusion_main_sensors_);
  virtual_object_.MergeFrom(from.virtual_object_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_use_lidar()) {
      set_use_lidar(from.use_lidar());
    }
    if (from.has_use_radar()) {
      set_use_radar(from.use_radar());
    }
    if (from.has_use_camera()) {
      set_use_camera(from.use_camera());
    }
    if (from.has_fusion_method()) {
      set_has_fusion_method();
      fusion_method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fusion_method_);
    }
    if (from.has_object_in_roi_check()) {
      set_object_in_roi_check(from.object_in_roi_check());
    }
    if (from.has_radius_for_roi_object_check()) {
      set_radius_for_roi_object_check(from.radius_for_roi_object_check());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_localization_topic()) {
      set_has_localization_topic();
      localization_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.localization_topic_);
    }
    if (from.has_output_obstacles_topic_name()) {
      set_has_output_obstacles_topic_name();
      output_obstacles_topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_obstacles_topic_name_);
    }
    if (from.has_output_obstacles_topic_name_app()) {
      set_has_output_obstacles_topic_name_app();
      output_obstacles_topic_name_app_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_obstacles_topic_name_app_);
    }
    if (from.has_output_viz_fused_box_topic_name()) {
      set_has_output_viz_fused_box_topic_name();
      output_viz_fused_box_topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_viz_fused_box_topic_name_);
    }
    if (from.has_output_viz_fused_text_topic_name()) {
      set_has_output_viz_fused_text_topic_name();
      output_viz_fused_text_topic_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.output_viz_fused_text_topic_name_);
    }
    if (from.has_enable_publish_fusion_topic()) {
      set_enable_publish_fusion_topic(from.enable_publish_fusion_topic());
    }
    if (from.has_enable_publish_fusion_topic_app()) {
      set_enable_publish_fusion_topic_app(from.enable_publish_fusion_topic_app());
    }
    if (from.has_use_obu()) {
      set_use_obu(from.use_obu());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_use_vidar()) {
      set_use_vidar(from.use_vidar());
    }
    if (from.has_pub_vidar()) {
      set_pub_vidar(from.pub_vidar());
    }
    if (from.has_pub_radar()) {
      set_pub_radar(from.pub_radar());
    }
    if (from.has_pub_obu()) {
      set_pub_obu(from.pub_obu());
    }
    if (from.has_use_falcon_lidar()) {
      set_use_falcon_lidar(from.use_falcon_lidar());
    }
    if (from.has_falcon_lidar_filter_distance()) {
      set_falcon_lidar_filter_distance(from.falcon_lidar_filter_distance());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FusionComponentInitOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:perception.FusionComponentInitOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FusionComponentInitOptions::CopyFrom(const FusionComponentInitOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:perception.FusionComponentInitOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FusionComponentInitOptions::IsInitialized() const {

  return true;
}

void FusionComponentInitOptions::Swap(FusionComponentInitOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FusionComponentInitOptions::InternalSwap(FusionComponentInitOptions* other) {
  std::swap(use_lidar_, other->use_lidar_);
  std::swap(use_radar_, other->use_radar_);
  std::swap(use_camera_, other->use_camera_);
  input_sensor_.UnsafeArenaSwap(&other->input_sensor_);
  fusion_method_.Swap(&other->fusion_method_);
  fusion_main_sensors_.UnsafeArenaSwap(&other->fusion_main_sensors_);
  std::swap(object_in_roi_check_, other->object_in_roi_check_);
  std::swap(radius_for_roi_object_check_, other->radius_for_roi_object_check_);
  localization_topic_.Swap(&other->localization_topic_);
  output_obstacles_topic_name_.Swap(&other->output_obstacles_topic_name_);
  output_obstacles_topic_name_app_.Swap(&other->output_obstacles_topic_name_app_);
  output_viz_fused_box_topic_name_.Swap(&other->output_viz_fused_box_topic_name_);
  output_viz_fused_text_topic_name_.Swap(&other->output_viz_fused_text_topic_name_);
  std::swap(enable_publish_fusion_topic_, other->enable_publish_fusion_topic_);
  std::swap(enable_publish_fusion_topic_app_, other->enable_publish_fusion_topic_app_);
  std::swap(use_obu_, other->use_obu_);
  std::swap(use_vidar_, other->use_vidar_);
  std::swap(pub_vidar_, other->pub_vidar_);
  std::swap(pub_radar_, other->pub_radar_);
  std::swap(pub_obu_, other->pub_obu_);
  std::swap(use_falcon_lidar_, other->use_falcon_lidar_);
  std::swap(falcon_lidar_filter_distance_, other->falcon_lidar_filter_distance_);
  virtual_object_.UnsafeArenaSwap(&other->virtual_object_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FusionComponentInitOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FusionComponentInitOptions_descriptor_;
  metadata.reflection = FusionComponentInitOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FusionComponentInitOptions

// optional bool use_lidar = 1 [default = true];
bool FusionComponentInitOptions::has_use_lidar() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FusionComponentInitOptions::set_has_use_lidar() {
  _has_bits_[0] |= 0x00000001u;
}
void FusionComponentInitOptions::clear_has_use_lidar() {
  _has_bits_[0] &= ~0x00000001u;
}
void FusionComponentInitOptions::clear_use_lidar() {
  use_lidar_ = true;
  clear_has_use_lidar();
}
 bool FusionComponentInitOptions::use_lidar() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.use_lidar)
  return use_lidar_;
}
 void FusionComponentInitOptions::set_use_lidar(bool value) {
  set_has_use_lidar();
  use_lidar_ = value;
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.use_lidar)
}

// optional bool use_radar = 2 [default = false];
bool FusionComponentInitOptions::has_use_radar() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FusionComponentInitOptions::set_has_use_radar() {
  _has_bits_[0] |= 0x00000002u;
}
void FusionComponentInitOptions::clear_has_use_radar() {
  _has_bits_[0] &= ~0x00000002u;
}
void FusionComponentInitOptions::clear_use_radar() {
  use_radar_ = false;
  clear_has_use_radar();
}
 bool FusionComponentInitOptions::use_radar() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.use_radar)
  return use_radar_;
}
 void FusionComponentInitOptions::set_use_radar(bool value) {
  set_has_use_radar();
  use_radar_ = value;
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.use_radar)
}

// optional bool use_camera = 3 [default = true];
bool FusionComponentInitOptions::has_use_camera() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FusionComponentInitOptions::set_has_use_camera() {
  _has_bits_[0] |= 0x00000004u;
}
void FusionComponentInitOptions::clear_has_use_camera() {
  _has_bits_[0] &= ~0x00000004u;
}
void FusionComponentInitOptions::clear_use_camera() {
  use_camera_ = true;
  clear_has_use_camera();
}
 bool FusionComponentInitOptions::use_camera() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.use_camera)
  return use_camera_;
}
 void FusionComponentInitOptions::set_use_camera(bool value) {
  set_has_use_camera();
  use_camera_ = value;
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.use_camera)
}

// repeated .perception.InputSensor input_sensor = 4;
int FusionComponentInitOptions::input_sensor_size() const {
  return input_sensor_.size();
}
void FusionComponentInitOptions::clear_input_sensor() {
  input_sensor_.Clear();
}
const ::perception::InputSensor& FusionComponentInitOptions::input_sensor(int index) const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.input_sensor)
  return input_sensor_.Get(index);
}
::perception::InputSensor* FusionComponentInitOptions::mutable_input_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:perception.FusionComponentInitOptions.input_sensor)
  return input_sensor_.Mutable(index);
}
::perception::InputSensor* FusionComponentInitOptions::add_input_sensor() {
  // @@protoc_insertion_point(field_add:perception.FusionComponentInitOptions.input_sensor)
  return input_sensor_.Add();
}
::google::protobuf::RepeatedPtrField< ::perception::InputSensor >*
FusionComponentInitOptions::mutable_input_sensor() {
  // @@protoc_insertion_point(field_mutable_list:perception.FusionComponentInitOptions.input_sensor)
  return &input_sensor_;
}
const ::google::protobuf::RepeatedPtrField< ::perception::InputSensor >&
FusionComponentInitOptions::input_sensor() const {
  // @@protoc_insertion_point(field_list:perception.FusionComponentInitOptions.input_sensor)
  return input_sensor_;
}

// optional string fusion_method = 5;
bool FusionComponentInitOptions::has_fusion_method() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FusionComponentInitOptions::set_has_fusion_method() {
  _has_bits_[0] |= 0x00000010u;
}
void FusionComponentInitOptions::clear_has_fusion_method() {
  _has_bits_[0] &= ~0x00000010u;
}
void FusionComponentInitOptions::clear_fusion_method() {
  fusion_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fusion_method();
}
 const ::std::string& FusionComponentInitOptions::fusion_method() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.fusion_method)
  return fusion_method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FusionComponentInitOptions::set_fusion_method(const ::std::string& value) {
  set_has_fusion_method();
  fusion_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.fusion_method)
}
 void FusionComponentInitOptions::set_fusion_method(const char* value) {
  set_has_fusion_method();
  fusion_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.FusionComponentInitOptions.fusion_method)
}
 void FusionComponentInitOptions::set_fusion_method(const char* value, size_t size) {
  set_has_fusion_method();
  fusion_method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.FusionComponentInitOptions.fusion_method)
}
 ::std::string* FusionComponentInitOptions::mutable_fusion_method() {
  set_has_fusion_method();
  // @@protoc_insertion_point(field_mutable:perception.FusionComponentInitOptions.fusion_method)
  return fusion_method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FusionComponentInitOptions::release_fusion_method() {
  // @@protoc_insertion_point(field_release:perception.FusionComponentInitOptions.fusion_method)
  clear_has_fusion_method();
  return fusion_method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FusionComponentInitOptions::set_allocated_fusion_method(::std::string* fusion_method) {
  if (fusion_method != NULL) {
    set_has_fusion_method();
  } else {
    clear_has_fusion_method();
  }
  fusion_method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fusion_method);
  // @@protoc_insertion_point(field_set_allocated:perception.FusionComponentInitOptions.fusion_method)
}

// repeated string fusion_main_sensors = 6;
int FusionComponentInitOptions::fusion_main_sensors_size() const {
  return fusion_main_sensors_.size();
}
void FusionComponentInitOptions::clear_fusion_main_sensors() {
  fusion_main_sensors_.Clear();
}
 const ::std::string& FusionComponentInitOptions::fusion_main_sensors(int index) const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.fusion_main_sensors)
  return fusion_main_sensors_.Get(index);
}
 ::std::string* FusionComponentInitOptions::mutable_fusion_main_sensors(int index) {
  // @@protoc_insertion_point(field_mutable:perception.FusionComponentInitOptions.fusion_main_sensors)
  return fusion_main_sensors_.Mutable(index);
}
 void FusionComponentInitOptions::set_fusion_main_sensors(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.fusion_main_sensors)
  fusion_main_sensors_.Mutable(index)->assign(value);
}
 void FusionComponentInitOptions::set_fusion_main_sensors(int index, const char* value) {
  fusion_main_sensors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:perception.FusionComponentInitOptions.fusion_main_sensors)
}
 void FusionComponentInitOptions::set_fusion_main_sensors(int index, const char* value, size_t size) {
  fusion_main_sensors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:perception.FusionComponentInitOptions.fusion_main_sensors)
}
 ::std::string* FusionComponentInitOptions::add_fusion_main_sensors() {
  // @@protoc_insertion_point(field_add_mutable:perception.FusionComponentInitOptions.fusion_main_sensors)
  return fusion_main_sensors_.Add();
}
 void FusionComponentInitOptions::add_fusion_main_sensors(const ::std::string& value) {
  fusion_main_sensors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:perception.FusionComponentInitOptions.fusion_main_sensors)
}
 void FusionComponentInitOptions::add_fusion_main_sensors(const char* value) {
  fusion_main_sensors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:perception.FusionComponentInitOptions.fusion_main_sensors)
}
 void FusionComponentInitOptions::add_fusion_main_sensors(const char* value, size_t size) {
  fusion_main_sensors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:perception.FusionComponentInitOptions.fusion_main_sensors)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
FusionComponentInitOptions::fusion_main_sensors() const {
  // @@protoc_insertion_point(field_list:perception.FusionComponentInitOptions.fusion_main_sensors)
  return fusion_main_sensors_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
FusionComponentInitOptions::mutable_fusion_main_sensors() {
  // @@protoc_insertion_point(field_mutable_list:perception.FusionComponentInitOptions.fusion_main_sensors)
  return &fusion_main_sensors_;
}

// optional bool object_in_roi_check = 7;
bool FusionComponentInitOptions::has_object_in_roi_check() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FusionComponentInitOptions::set_has_object_in_roi_check() {
  _has_bits_[0] |= 0x00000040u;
}
void FusionComponentInitOptions::clear_has_object_in_roi_check() {
  _has_bits_[0] &= ~0x00000040u;
}
void FusionComponentInitOptions::clear_object_in_roi_check() {
  object_in_roi_check_ = false;
  clear_has_object_in_roi_check();
}
 bool FusionComponentInitOptions::object_in_roi_check() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.object_in_roi_check)
  return object_in_roi_check_;
}
 void FusionComponentInitOptions::set_object_in_roi_check(bool value) {
  set_has_object_in_roi_check();
  object_in_roi_check_ = value;
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.object_in_roi_check)
}

// optional double radius_for_roi_object_check = 8;
bool FusionComponentInitOptions::has_radius_for_roi_object_check() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FusionComponentInitOptions::set_has_radius_for_roi_object_check() {
  _has_bits_[0] |= 0x00000080u;
}
void FusionComponentInitOptions::clear_has_radius_for_roi_object_check() {
  _has_bits_[0] &= ~0x00000080u;
}
void FusionComponentInitOptions::clear_radius_for_roi_object_check() {
  radius_for_roi_object_check_ = 0;
  clear_has_radius_for_roi_object_check();
}
 double FusionComponentInitOptions::radius_for_roi_object_check() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.radius_for_roi_object_check)
  return radius_for_roi_object_check_;
}
 void FusionComponentInitOptions::set_radius_for_roi_object_check(double value) {
  set_has_radius_for_roi_object_check();
  radius_for_roi_object_check_ = value;
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.radius_for_roi_object_check)
}

// optional string localization_topic = 9;
bool FusionComponentInitOptions::has_localization_topic() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FusionComponentInitOptions::set_has_localization_topic() {
  _has_bits_[0] |= 0x00000100u;
}
void FusionComponentInitOptions::clear_has_localization_topic() {
  _has_bits_[0] &= ~0x00000100u;
}
void FusionComponentInitOptions::clear_localization_topic() {
  localization_topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_localization_topic();
}
 const ::std::string& FusionComponentInitOptions::localization_topic() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.localization_topic)
  return localization_topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FusionComponentInitOptions::set_localization_topic(const ::std::string& value) {
  set_has_localization_topic();
  localization_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.localization_topic)
}
 void FusionComponentInitOptions::set_localization_topic(const char* value) {
  set_has_localization_topic();
  localization_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.FusionComponentInitOptions.localization_topic)
}
 void FusionComponentInitOptions::set_localization_topic(const char* value, size_t size) {
  set_has_localization_topic();
  localization_topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.FusionComponentInitOptions.localization_topic)
}
 ::std::string* FusionComponentInitOptions::mutable_localization_topic() {
  set_has_localization_topic();
  // @@protoc_insertion_point(field_mutable:perception.FusionComponentInitOptions.localization_topic)
  return localization_topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FusionComponentInitOptions::release_localization_topic() {
  // @@protoc_insertion_point(field_release:perception.FusionComponentInitOptions.localization_topic)
  clear_has_localization_topic();
  return localization_topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FusionComponentInitOptions::set_allocated_localization_topic(::std::string* localization_topic) {
  if (localization_topic != NULL) {
    set_has_localization_topic();
  } else {
    clear_has_localization_topic();
  }
  localization_topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), localization_topic);
  // @@protoc_insertion_point(field_set_allocated:perception.FusionComponentInitOptions.localization_topic)
}

// optional string output_obstacles_topic_name = 10;
bool FusionComponentInitOptions::has_output_obstacles_topic_name() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FusionComponentInitOptions::set_has_output_obstacles_topic_name() {
  _has_bits_[0] |= 0x00000200u;
}
void FusionComponentInitOptions::clear_has_output_obstacles_topic_name() {
  _has_bits_[0] &= ~0x00000200u;
}
void FusionComponentInitOptions::clear_output_obstacles_topic_name() {
  output_obstacles_topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_obstacles_topic_name();
}
 const ::std::string& FusionComponentInitOptions::output_obstacles_topic_name() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.output_obstacles_topic_name)
  return output_obstacles_topic_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FusionComponentInitOptions::set_output_obstacles_topic_name(const ::std::string& value) {
  set_has_output_obstacles_topic_name();
  output_obstacles_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.output_obstacles_topic_name)
}
 void FusionComponentInitOptions::set_output_obstacles_topic_name(const char* value) {
  set_has_output_obstacles_topic_name();
  output_obstacles_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.FusionComponentInitOptions.output_obstacles_topic_name)
}
 void FusionComponentInitOptions::set_output_obstacles_topic_name(const char* value, size_t size) {
  set_has_output_obstacles_topic_name();
  output_obstacles_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.FusionComponentInitOptions.output_obstacles_topic_name)
}
 ::std::string* FusionComponentInitOptions::mutable_output_obstacles_topic_name() {
  set_has_output_obstacles_topic_name();
  // @@protoc_insertion_point(field_mutable:perception.FusionComponentInitOptions.output_obstacles_topic_name)
  return output_obstacles_topic_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FusionComponentInitOptions::release_output_obstacles_topic_name() {
  // @@protoc_insertion_point(field_release:perception.FusionComponentInitOptions.output_obstacles_topic_name)
  clear_has_output_obstacles_topic_name();
  return output_obstacles_topic_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FusionComponentInitOptions::set_allocated_output_obstacles_topic_name(::std::string* output_obstacles_topic_name) {
  if (output_obstacles_topic_name != NULL) {
    set_has_output_obstacles_topic_name();
  } else {
    clear_has_output_obstacles_topic_name();
  }
  output_obstacles_topic_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_obstacles_topic_name);
  // @@protoc_insertion_point(field_set_allocated:perception.FusionComponentInitOptions.output_obstacles_topic_name)
}

// optional string output_obstacles_topic_name_app = 11;
bool FusionComponentInitOptions::has_output_obstacles_topic_name_app() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FusionComponentInitOptions::set_has_output_obstacles_topic_name_app() {
  _has_bits_[0] |= 0x00000400u;
}
void FusionComponentInitOptions::clear_has_output_obstacles_topic_name_app() {
  _has_bits_[0] &= ~0x00000400u;
}
void FusionComponentInitOptions::clear_output_obstacles_topic_name_app() {
  output_obstacles_topic_name_app_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_obstacles_topic_name_app();
}
 const ::std::string& FusionComponentInitOptions::output_obstacles_topic_name_app() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.output_obstacles_topic_name_app)
  return output_obstacles_topic_name_app_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FusionComponentInitOptions::set_output_obstacles_topic_name_app(const ::std::string& value) {
  set_has_output_obstacles_topic_name_app();
  output_obstacles_topic_name_app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.output_obstacles_topic_name_app)
}
 void FusionComponentInitOptions::set_output_obstacles_topic_name_app(const char* value) {
  set_has_output_obstacles_topic_name_app();
  output_obstacles_topic_name_app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.FusionComponentInitOptions.output_obstacles_topic_name_app)
}
 void FusionComponentInitOptions::set_output_obstacles_topic_name_app(const char* value, size_t size) {
  set_has_output_obstacles_topic_name_app();
  output_obstacles_topic_name_app_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.FusionComponentInitOptions.output_obstacles_topic_name_app)
}
 ::std::string* FusionComponentInitOptions::mutable_output_obstacles_topic_name_app() {
  set_has_output_obstacles_topic_name_app();
  // @@protoc_insertion_point(field_mutable:perception.FusionComponentInitOptions.output_obstacles_topic_name_app)
  return output_obstacles_topic_name_app_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FusionComponentInitOptions::release_output_obstacles_topic_name_app() {
  // @@protoc_insertion_point(field_release:perception.FusionComponentInitOptions.output_obstacles_topic_name_app)
  clear_has_output_obstacles_topic_name_app();
  return output_obstacles_topic_name_app_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FusionComponentInitOptions::set_allocated_output_obstacles_topic_name_app(::std::string* output_obstacles_topic_name_app) {
  if (output_obstacles_topic_name_app != NULL) {
    set_has_output_obstacles_topic_name_app();
  } else {
    clear_has_output_obstacles_topic_name_app();
  }
  output_obstacles_topic_name_app_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_obstacles_topic_name_app);
  // @@protoc_insertion_point(field_set_allocated:perception.FusionComponentInitOptions.output_obstacles_topic_name_app)
}

// optional string output_viz_fused_box_topic_name = 12;
bool FusionComponentInitOptions::has_output_viz_fused_box_topic_name() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FusionComponentInitOptions::set_has_output_viz_fused_box_topic_name() {
  _has_bits_[0] |= 0x00000800u;
}
void FusionComponentInitOptions::clear_has_output_viz_fused_box_topic_name() {
  _has_bits_[0] &= ~0x00000800u;
}
void FusionComponentInitOptions::clear_output_viz_fused_box_topic_name() {
  output_viz_fused_box_topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_viz_fused_box_topic_name();
}
 const ::std::string& FusionComponentInitOptions::output_viz_fused_box_topic_name() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.output_viz_fused_box_topic_name)
  return output_viz_fused_box_topic_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FusionComponentInitOptions::set_output_viz_fused_box_topic_name(const ::std::string& value) {
  set_has_output_viz_fused_box_topic_name();
  output_viz_fused_box_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.output_viz_fused_box_topic_name)
}
 void FusionComponentInitOptions::set_output_viz_fused_box_topic_name(const char* value) {
  set_has_output_viz_fused_box_topic_name();
  output_viz_fused_box_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.FusionComponentInitOptions.output_viz_fused_box_topic_name)
}
 void FusionComponentInitOptions::set_output_viz_fused_box_topic_name(const char* value, size_t size) {
  set_has_output_viz_fused_box_topic_name();
  output_viz_fused_box_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.FusionComponentInitOptions.output_viz_fused_box_topic_name)
}
 ::std::string* FusionComponentInitOptions::mutable_output_viz_fused_box_topic_name() {
  set_has_output_viz_fused_box_topic_name();
  // @@protoc_insertion_point(field_mutable:perception.FusionComponentInitOptions.output_viz_fused_box_topic_name)
  return output_viz_fused_box_topic_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FusionComponentInitOptions::release_output_viz_fused_box_topic_name() {
  // @@protoc_insertion_point(field_release:perception.FusionComponentInitOptions.output_viz_fused_box_topic_name)
  clear_has_output_viz_fused_box_topic_name();
  return output_viz_fused_box_topic_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FusionComponentInitOptions::set_allocated_output_viz_fused_box_topic_name(::std::string* output_viz_fused_box_topic_name) {
  if (output_viz_fused_box_topic_name != NULL) {
    set_has_output_viz_fused_box_topic_name();
  } else {
    clear_has_output_viz_fused_box_topic_name();
  }
  output_viz_fused_box_topic_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_viz_fused_box_topic_name);
  // @@protoc_insertion_point(field_set_allocated:perception.FusionComponentInitOptions.output_viz_fused_box_topic_name)
}

// optional string output_viz_fused_text_topic_name = 13;
bool FusionComponentInitOptions::has_output_viz_fused_text_topic_name() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void FusionComponentInitOptions::set_has_output_viz_fused_text_topic_name() {
  _has_bits_[0] |= 0x00001000u;
}
void FusionComponentInitOptions::clear_has_output_viz_fused_text_topic_name() {
  _has_bits_[0] &= ~0x00001000u;
}
void FusionComponentInitOptions::clear_output_viz_fused_text_topic_name() {
  output_viz_fused_text_topic_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_viz_fused_text_topic_name();
}
 const ::std::string& FusionComponentInitOptions::output_viz_fused_text_topic_name() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.output_viz_fused_text_topic_name)
  return output_viz_fused_text_topic_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FusionComponentInitOptions::set_output_viz_fused_text_topic_name(const ::std::string& value) {
  set_has_output_viz_fused_text_topic_name();
  output_viz_fused_text_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.output_viz_fused_text_topic_name)
}
 void FusionComponentInitOptions::set_output_viz_fused_text_topic_name(const char* value) {
  set_has_output_viz_fused_text_topic_name();
  output_viz_fused_text_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:perception.FusionComponentInitOptions.output_viz_fused_text_topic_name)
}
 void FusionComponentInitOptions::set_output_viz_fused_text_topic_name(const char* value, size_t size) {
  set_has_output_viz_fused_text_topic_name();
  output_viz_fused_text_topic_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:perception.FusionComponentInitOptions.output_viz_fused_text_topic_name)
}
 ::std::string* FusionComponentInitOptions::mutable_output_viz_fused_text_topic_name() {
  set_has_output_viz_fused_text_topic_name();
  // @@protoc_insertion_point(field_mutable:perception.FusionComponentInitOptions.output_viz_fused_text_topic_name)
  return output_viz_fused_text_topic_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FusionComponentInitOptions::release_output_viz_fused_text_topic_name() {
  // @@protoc_insertion_point(field_release:perception.FusionComponentInitOptions.output_viz_fused_text_topic_name)
  clear_has_output_viz_fused_text_topic_name();
  return output_viz_fused_text_topic_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FusionComponentInitOptions::set_allocated_output_viz_fused_text_topic_name(::std::string* output_viz_fused_text_topic_name) {
  if (output_viz_fused_text_topic_name != NULL) {
    set_has_output_viz_fused_text_topic_name();
  } else {
    clear_has_output_viz_fused_text_topic_name();
  }
  output_viz_fused_text_topic_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_viz_fused_text_topic_name);
  // @@protoc_insertion_point(field_set_allocated:perception.FusionComponentInitOptions.output_viz_fused_text_topic_name)
}

// optional bool enable_publish_fusion_topic = 14 [default = true];
bool FusionComponentInitOptions::has_enable_publish_fusion_topic() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void FusionComponentInitOptions::set_has_enable_publish_fusion_topic() {
  _has_bits_[0] |= 0x00002000u;
}
void FusionComponentInitOptions::clear_has_enable_publish_fusion_topic() {
  _has_bits_[0] &= ~0x00002000u;
}
void FusionComponentInitOptions::clear_enable_publish_fusion_topic() {
  enable_publish_fusion_topic_ = true;
  clear_has_enable_publish_fusion_topic();
}
 bool FusionComponentInitOptions::enable_publish_fusion_topic() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.enable_publish_fusion_topic)
  return enable_publish_fusion_topic_;
}
 void FusionComponentInitOptions::set_enable_publish_fusion_topic(bool value) {
  set_has_enable_publish_fusion_topic();
  enable_publish_fusion_topic_ = value;
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.enable_publish_fusion_topic)
}

// optional bool enable_publish_fusion_topic_app = 15 [default = true];
bool FusionComponentInitOptions::has_enable_publish_fusion_topic_app() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void FusionComponentInitOptions::set_has_enable_publish_fusion_topic_app() {
  _has_bits_[0] |= 0x00004000u;
}
void FusionComponentInitOptions::clear_has_enable_publish_fusion_topic_app() {
  _has_bits_[0] &= ~0x00004000u;
}
void FusionComponentInitOptions::clear_enable_publish_fusion_topic_app() {
  enable_publish_fusion_topic_app_ = true;
  clear_has_enable_publish_fusion_topic_app();
}
 bool FusionComponentInitOptions::enable_publish_fusion_topic_app() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.enable_publish_fusion_topic_app)
  return enable_publish_fusion_topic_app_;
}
 void FusionComponentInitOptions::set_enable_publish_fusion_topic_app(bool value) {
  set_has_enable_publish_fusion_topic_app();
  enable_publish_fusion_topic_app_ = value;
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.enable_publish_fusion_topic_app)
}

// optional bool use_obu = 16 [default = true];
bool FusionComponentInitOptions::has_use_obu() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void FusionComponentInitOptions::set_has_use_obu() {
  _has_bits_[0] |= 0x00008000u;
}
void FusionComponentInitOptions::clear_has_use_obu() {
  _has_bits_[0] &= ~0x00008000u;
}
void FusionComponentInitOptions::clear_use_obu() {
  use_obu_ = true;
  clear_has_use_obu();
}
 bool FusionComponentInitOptions::use_obu() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.use_obu)
  return use_obu_;
}
 void FusionComponentInitOptions::set_use_obu(bool value) {
  set_has_use_obu();
  use_obu_ = value;
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.use_obu)
}

// optional bool use_vidar = 17 [default = false];
bool FusionComponentInitOptions::has_use_vidar() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void FusionComponentInitOptions::set_has_use_vidar() {
  _has_bits_[0] |= 0x00010000u;
}
void FusionComponentInitOptions::clear_has_use_vidar() {
  _has_bits_[0] &= ~0x00010000u;
}
void FusionComponentInitOptions::clear_use_vidar() {
  use_vidar_ = false;
  clear_has_use_vidar();
}
 bool FusionComponentInitOptions::use_vidar() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.use_vidar)
  return use_vidar_;
}
 void FusionComponentInitOptions::set_use_vidar(bool value) {
  set_has_use_vidar();
  use_vidar_ = value;
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.use_vidar)
}

// optional bool pub_vidar = 18 [default = false];
bool FusionComponentInitOptions::has_pub_vidar() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void FusionComponentInitOptions::set_has_pub_vidar() {
  _has_bits_[0] |= 0x00020000u;
}
void FusionComponentInitOptions::clear_has_pub_vidar() {
  _has_bits_[0] &= ~0x00020000u;
}
void FusionComponentInitOptions::clear_pub_vidar() {
  pub_vidar_ = false;
  clear_has_pub_vidar();
}
 bool FusionComponentInitOptions::pub_vidar() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.pub_vidar)
  return pub_vidar_;
}
 void FusionComponentInitOptions::set_pub_vidar(bool value) {
  set_has_pub_vidar();
  pub_vidar_ = value;
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.pub_vidar)
}

// optional bool pub_radar = 19 [default = false];
bool FusionComponentInitOptions::has_pub_radar() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void FusionComponentInitOptions::set_has_pub_radar() {
  _has_bits_[0] |= 0x00040000u;
}
void FusionComponentInitOptions::clear_has_pub_radar() {
  _has_bits_[0] &= ~0x00040000u;
}
void FusionComponentInitOptions::clear_pub_radar() {
  pub_radar_ = false;
  clear_has_pub_radar();
}
 bool FusionComponentInitOptions::pub_radar() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.pub_radar)
  return pub_radar_;
}
 void FusionComponentInitOptions::set_pub_radar(bool value) {
  set_has_pub_radar();
  pub_radar_ = value;
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.pub_radar)
}

// optional bool pub_obu = 20 [default = false];
bool FusionComponentInitOptions::has_pub_obu() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void FusionComponentInitOptions::set_has_pub_obu() {
  _has_bits_[0] |= 0x00080000u;
}
void FusionComponentInitOptions::clear_has_pub_obu() {
  _has_bits_[0] &= ~0x00080000u;
}
void FusionComponentInitOptions::clear_pub_obu() {
  pub_obu_ = false;
  clear_has_pub_obu();
}
 bool FusionComponentInitOptions::pub_obu() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.pub_obu)
  return pub_obu_;
}
 void FusionComponentInitOptions::set_pub_obu(bool value) {
  set_has_pub_obu();
  pub_obu_ = value;
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.pub_obu)
}

// optional bool use_falcon_lidar = 21 [default = true];
bool FusionComponentInitOptions::has_use_falcon_lidar() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void FusionComponentInitOptions::set_has_use_falcon_lidar() {
  _has_bits_[0] |= 0x00100000u;
}
void FusionComponentInitOptions::clear_has_use_falcon_lidar() {
  _has_bits_[0] &= ~0x00100000u;
}
void FusionComponentInitOptions::clear_use_falcon_lidar() {
  use_falcon_lidar_ = true;
  clear_has_use_falcon_lidar();
}
 bool FusionComponentInitOptions::use_falcon_lidar() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.use_falcon_lidar)
  return use_falcon_lidar_;
}
 void FusionComponentInitOptions::set_use_falcon_lidar(bool value) {
  set_has_use_falcon_lidar();
  use_falcon_lidar_ = value;
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.use_falcon_lidar)
}

// optional double falcon_lidar_filter_distance = 22;
bool FusionComponentInitOptions::has_falcon_lidar_filter_distance() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void FusionComponentInitOptions::set_has_falcon_lidar_filter_distance() {
  _has_bits_[0] |= 0x00200000u;
}
void FusionComponentInitOptions::clear_has_falcon_lidar_filter_distance() {
  _has_bits_[0] &= ~0x00200000u;
}
void FusionComponentInitOptions::clear_falcon_lidar_filter_distance() {
  falcon_lidar_filter_distance_ = 0;
  clear_has_falcon_lidar_filter_distance();
}
 double FusionComponentInitOptions::falcon_lidar_filter_distance() const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.falcon_lidar_filter_distance)
  return falcon_lidar_filter_distance_;
}
 void FusionComponentInitOptions::set_falcon_lidar_filter_distance(double value) {
  set_has_falcon_lidar_filter_distance();
  falcon_lidar_filter_distance_ = value;
  // @@protoc_insertion_point(field_set:perception.FusionComponentInitOptions.falcon_lidar_filter_distance)
}

// repeated .perception.VirtualObject virtual_object = 23;
int FusionComponentInitOptions::virtual_object_size() const {
  return virtual_object_.size();
}
void FusionComponentInitOptions::clear_virtual_object() {
  virtual_object_.Clear();
}
const ::perception::VirtualObject& FusionComponentInitOptions::virtual_object(int index) const {
  // @@protoc_insertion_point(field_get:perception.FusionComponentInitOptions.virtual_object)
  return virtual_object_.Get(index);
}
::perception::VirtualObject* FusionComponentInitOptions::mutable_virtual_object(int index) {
  // @@protoc_insertion_point(field_mutable:perception.FusionComponentInitOptions.virtual_object)
  return virtual_object_.Mutable(index);
}
::perception::VirtualObject* FusionComponentInitOptions::add_virtual_object() {
  // @@protoc_insertion_point(field_add:perception.FusionComponentInitOptions.virtual_object)
  return virtual_object_.Add();
}
::google::protobuf::RepeatedPtrField< ::perception::VirtualObject >*
FusionComponentInitOptions::mutable_virtual_object() {
  // @@protoc_insertion_point(field_mutable_list:perception.FusionComponentInitOptions.virtual_object)
  return &virtual_object_;
}
const ::google::protobuf::RepeatedPtrField< ::perception::VirtualObject >&
FusionComponentInitOptions::virtual_object() const {
  // @@protoc_insertion_point(field_list:perception.FusionComponentInitOptions.virtual_object)
  return virtual_object_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception

// @@protoc_insertion_point(global_scope)
